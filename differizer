#!/usr/bin/python
import os
import subprocess
import re
import sys
from itertools import cycle

def corresponds(el1, el2):
	
	if int(el2[0]) <= int(el1[0]) and int(el1[0]) < int(el2[1]):
		return True
	elif int(el2[0]) < int(el1[1]) and int(el1[1]) <= int(el2[1]):
		return True

	return False

def is_it_in(struct1, struct2):
	
	run = True
	a = b = 0
	new_struct1 = new_struct2 = []
	Not_found_struct = ''
	adding_struct1 = ''
	adding_struct2 = ''
	while(run):
		if a+1 == len(struct1) or b+1 == len(struct2):
                        run = False
	
		st_numb = struct1[a].split('-')
		nd_numb = struct2[b].split('-')
		
		if corresponds(st_numb, nd_numb) or corresponds(nd_numb, st_numb,):
			adding_struct1 += st_numb[0] + '-' + st_numb[1] + ' '
			adding_struct2 += nd_numb[0] + '-' + nd_numb[1] + ' '
			a += 1; b += 1
	
		else:
			if int(st_numb[1]) <= int(nd_numb[0]):

				Not_found_struct += struct1[a]+' '
				a += 1
			
			elif int(nd_numb[1]) <= int(st_numb[0]):

				Not_found_struct += struct2[b]+' '
				b += 1
	
	newstruct1 = adding_struct1.split()
	newstruct2 = adding_struct2.split()
	
	return newstruct1, newstruct2, Not_found_struct
	
def trunc_space(el_list):
	
	run = True
	Not_found_struct = []
	new_struct = el_list
	elcycle = cycle(el_list)
	nextel = elcycle.next()
	which = 0
	
	while run:

		st_el_interval = el_list[which].split('-')
		nd_el_interval = el_list[which+1].split('-')

		margin = abs(int(st_el_interval[1]) - int(nd_el_interval[0]))
		if margin < 4:

			interval_start = str(int(st_el_interval[0])+(margin/2))
			interval_end = str(int(nd_el_interval[1])-(margin/2))
			el_list[which] = interval_start+'-'+interval_end
			el_list.remove(el_list[which+1])
			which -= 1
		which += 1
		if which+1 == len(el_list):
			return new_struct
	
	return new_struct

def size_align(structure1, structure2):
	size_diff = ''
	
	for value1, value2 in zip(structure1, structure2):
		interval_vals1 = value1.split('-')
		interval_vals2 = value2.split('-')
		size1 = int(interval_vals1[1]) - int(interval_vals1[0])
		size2 = int(interval_vals2[1]) - int(interval_vals2[0])
		if abs(size2 - size1) > 4:
			size_diff += value1+' '+value2+' '+str(abs(size2 - size1))

	return size_diff

def final_diffcount(structure1, structure2):

	struct_dict1 = {}; struct_dict2 = {}; struct_size1 = {}; struct_size2 = {}
	struct_dict1['H'] = 0; struct_dict2['H'] = 0; struct_size1['H'] = []; struct_size2['H'] = []
	struct_dict1['E'] = 0; struct_dict2['E'] = 0; struct_size1['E'] = []; struct_size2['E'] = []
	struct_dict1['-'] = 0; struct_dict2['-'] = 0; struct_size1['-'] = []; struct_size2['-'] = []
	cc = 0; struct_diff = ''
	count_same1 = 0; count_same2 = 0
	last_item1 = last_item2 = ''; last_number1 = last_number2 = 0
	last_struct1 = structure1[0]; last_struct2 = structure2[0]
	for i,( struct_item1, struct_item2 ) in enumerate(zip( structure1, structure2 )):

		## Searching differences betwwen two structures
		if struct_item1 != struct_item2:
			
			struct_dict1[struct_item1] += 1; struct_dict2[struct_item2] += 1
			last_item1 = struct_item1; last_item2 = struct_item2
			cc += 1

		## if found there two structures are same adding before found total difference 
		else:
			if cc > 0:
				struct_diff += str(i+1-count_same1)+'-'+str(i+1)+' '
			struct_dict1[last_item1] = 0; struct_dict2[last_item2] = 0; cc = 0

		count_same1 += 1
		count_same2 += 1
		
		## Search end of structures and add it to dictionary
		if last_struct1 != struct_item1:
			struct_size1[last_struct1].append(str(i+1-count_same1)+'-'+str(i))
			last_struct1 = struct_item1
			count_same1 = 0
		
		if last_struct2 != struct_item2:
			struct_size2[last_struct2].append(str(i+1-count_same2)+'-'+str(i))
			last_struct2 = struct_item2
			count_same2 = 0

	nfound_struct = {};
	nfound_struct['E'] = []; nfound_struct['H'] = []; nfound_struct['-'] = []; 
	
	for key in ('E', 'H', '-'):
		trunc_struct1 = trunc_space( struct_size2[key] )
		trunc_struct2 = trunc_space( struct_size1[key] )
		struct_size1[key], struct_size2[key], nfound_struct[key]  = is_it_in(trunc_struct1, trunc_struct2)
		size_diff = size_align(struct_size1[key], struct_size2[key])
		print size_diff
	'''
	for key, val in struct_size1.iteritems():
		if key == '-':
			for x, y in zip(val, struct_size2[key]):
				print x, y
	'''
	return struct_diff
	

def spalv(struct, dssp, output, count, flag, measure):    
	line = struct.readline()   
	atst_structure = ''
	align_structure = ''
	Struct_ali = {}; Struct_atst = {}; null_dict = {}
	## Reading secondary structure elements leader structure
	while(True):
		line = struct.readline().rstrip('\n')
		if line.startswith('>'): break
		atst_structure += line
	atst_l = list(atst_structure)

	## Reading other structures and aligning them 
	while(True):
		line = struct.readline().rstrip('\n')
		if not line: break
		if line.startswith('>'):
			align_l = list(align_structure)
			final_diffcount(atst_structure, align_structure)
			#print difference
			break
			align_structure = ''
		else:
			align_structure += line

	return
class Bcolors:
        RED = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 0
#m = int(raw_input('Panasumo ivertis: '))
'''Test
fdssp = open('myf.dssp', 'r')
fstruct = open('myf.nodssp', 'r')

atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fdssp, fstruct, atstout, 0, 1, m)


'''# Test End


#   Atstovu atstovai
fdssp = open('../atst/atst.dssp', 'r')
fstruct = open('../atst/atst.str', 'r')
atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fstruct, fdssp, atstout, 0, 1, m)

'''##   Grupes su atstovais
for x in range(1,16):
        f1 = open('../dssp/'+str(x), 'r')
        f2 = open('../notdssp/'+str(x), 'r')
        outdssp = open('coolseek/'+str(x), 'w')
        outdssp.write(Bcolors.GREEN + '                 Alfa helix '+ Bcolors.YELLOW + ' Beta strand '+ Bcolors.RESET+'\n')
        spalv(f1, f2, outdssp, x, 0, m)
'''
