#!/usr/bin/python
import os
import subprocess
import re
import sys
from itertools import cycle

def align_size(one_structure, sec_structure):
	size1 = []; size2 = []
	sequence1 = 0; sequence2 = 0
	running = True
	end1 = 0; end2 = 0;

	while(running):
		number_at1 = one_structure[sequence1].split('-')
		if (sequence1 + 1) != len(one_structure):
			next_at1 = one_structure[sequence1+1].split('-')
			end1 = 1

		number_at2 = sec_structure[sequence2].split('-')
		if (sequence2 + 1) != len(sec_structure):
			next_at2 = sec_structure[sequence2+1].split('-')
			end2 = 0

		if int(number_at1[1]) < int(number_at2[0]):
			sequence1 += 1
		elif int(number_at2[1]) < int(number_at1[0]):
			sequence2 += 1
		else:
			print number_at1, number_at2
			if not end1	
			sequence1 += 1; sequence2 += 1
		if sequence1 == len(one_structure) or sequence2 == len(sec_structure):
			return 	
	return

def size_diff(structure1, structure2, i):

	if structure1 == 0: print 'error '+str(i)
	size = str(abs(structure2-structure1))+' '
	diff = str(i)+'-'+str(i+structure2)+' '
	return size, diff

def final_diffcount(structure1, structure2):

	struct_dict1 = {}; struct_dict2 = {}; struct_size1 = {}; struct_size2 = {}
	struct_dict1['H'] = 0; struct_dict2['H'] = 0; struct_size1['H'] = []; struct_size2['H'] = []
	struct_dict1['E'] = 0; struct_dict2['E'] = 0; struct_size1['E'] = []; struct_size2['E'] = []
	struct_dict1['-'] = 0; struct_dict2['-'] = 0; struct_size1['-'] = []; struct_size2['-'] = []
	cc = 0; struct_diff = ''
	count_same1 = 0; count_same2 = 0
	last_item1 = last_item2 = ''; last_number1 = last_number2 = 0
	last_struct1 = structure1[0]; last_struct2 = structure2[0]
	for i,( struct_item1, struct_item2 ) in enumerate(zip( structure1, structure2 )):

		if struct_item1 != struct_item2:
			
			struct_dict1[struct_item1] += 1; struct_dict2[struct_item2] += 1
			last_item1 = struct_item1; last_item2 = struct_item2
			cc += 1
		else:
			if cc > 0:
				struct_diff += str(i+1-count_same1)+'-'+str(i+1)+' '
			struct_dict1[last_item1] = 0; struct_dict2[last_item2] = 0; cc = 0

		count_same1 += 1
		count_same2 += 1

		if last_struct1 != struct_item1:
			struct_size1[last_struct1].append(str(i+1-count_same1)+'-'+str(i))
			last_struct1 = struct_item1
			count_same1 = 0
		
		if last_struct2 != struct_item2:
			struct_size2[last_struct2].append(str(i+1-count_same2)+'-'+str(i))
			last_struct2 = struct_item2
			count_same2 = 0
	
	for key, val in struct_size1.iteritems():
		align_size(struct_size2[key], val)

	diff_list = struct_diff.split()
	diff_list.append('')
	struct_list1 = list(structure1); struct_list2 = list(structure2)
	print struct_size1['H']
	return struct_diff
	

def spalv(struct, dssp, output, count, flag, measure):    
	line = struct.readline()   
	atst_structure = ''
	align_structure = ''
	Struct_ali = {}; Struct_atst = {}; null_dict = {}
	## Reading secondary structure elements leader structure
	while(True):
		line = struct.readline().rstrip('\n')
		if line.startswith('>'): break
		atst_structure += line
	atst_l = list(atst_structure)

	## Reading other structures and aligning them 
	while(True):
		line = struct.readline().rstrip('\n')
		if not line: break
		if line.startswith('>'):
			align_l = list(align_structure)
			final_diffcount(atst_structure, align_structure)
			#print difference
			break
			align_structure = ''
		else:
			align_structure += line

	return
class Bcolors:
        RED = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 0
#m = int(raw_input('Panasumo ivertis: '))
'''Test
fdssp = open('myf.dssp', 'r')
fstruct = open('myf.nodssp', 'r')

atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fdssp, fstruct, atstout, 0, 1, m)


'''# Test End


#   Atstovu atstovai
fdssp = open('../atst/atst.dssp', 'r')
fstruct = open('../atst/atst.str', 'r')
atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fstruct, fdssp, atstout, 0, 1, m)

'''##   Grupes su atstovais
for x in range(1,16):
        f1 = open('../dssp/'+str(x), 'r')
        f2 = open('../notdssp/'+str(x), 'r')
        outdssp = open('coolseek/'+str(x), 'w')
        outdssp.write(Bcolors.GREEN + '                 Alfa helix '+ Bcolors.YELLOW + ' Beta strand '+ Bcolors.RESET+'\n')
        spalv(f1, f2, outdssp, x, 0, m)
'''
