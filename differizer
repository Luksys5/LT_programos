#!/usr/bin/python
import os, subprocess
import re, sys
def Final_diffcount(str1, str2):
	


	elif int(chint[0]) > int(zinterval[1]):
		while int(chint[0]) > int(interval[1]):
			differs += binds[b]+' '
			notf += binds[b]+' '
			if zinterval == ['']:
				for x in range(a,len(cbind)):
					differs +=  cbind[x]+' '
					notf += cbind[x]+' '
				return differs, notf
			b+=1
			interval = binds[b].split('-')
			zinterval = binds[b+1].split('-')
	elif (int(chint[1]) >= int(interval[0])) and (int(interval[1]) >= int(zchint[0])):
		differs += placing(int(chint[0]),int(interval[0]),0)
		while int(interval[1]) >= int(zchint[0]):
			differs += chint[1]+'-'+zchint[0]+' '
			notf += chint[1]+'-'+zchint[0]+' '
			a += 1
			chint = cbind[a].split('-')
			zchint = cbind[a+1].split('-')
			if zchint == ['']:
				differs += placing(int(chint[1]),int(interval[1]),0)
				for x in range(b+1,len(binds)):
					differs += binds[x]+' '
					notf += binds[x]+' '
				return differs, notf
	def align_structures(al1, al2):
	x = 0
	diff = ''
	al1_last_count = []
	al2_last_count = []
	al1_last = ''
	al2_last = ''
	x = 0
	while(True):
		if al1[x] != al2[x]:
			start = x+1
			count = -1
			while( al1[x] != al2[x] ):
				count += 1
				x += 1
				if x == len(al1):
					diff += str(start)+'-'+str(count+start)+' '
					return diff, al1_last_count, al2_last_count
			diff += str(start)+'-'+str(count+start)+' '	
			last = al1[x-1]
		else:
			x += 1
		if x == len(al1): return diff, al1_last_count, al2_last_count


### Pabaigti su atskirti coils helix ir sheets tada imesti i funckija Final_diffocunt
def separate_struct(struct):
	x = 0
	while(x != len(struct)):
	
def spalv(struct, dssp, output, count, flag, measure):    
	line = struct.readline()   
	atst_str = ''
	align_str = ''

	## Reading secondary structure elements leader structure
	while(True):
		line = struct.readline().rstrip('\n')
		if re.match('^>', line): break
		atst_str += line
	atst_l = list(atst_str)

	## Reading other structures and aligning them 
	while(True):
		line = struct.readline().rstrip('\n')
		if not line: break
		if re.match('^>', line):
			align_l = list(align_str)
			difference, l1, l2 = align_structures(atst_str, align_str)

			#size_diff = Final_diffcount(atst_str, align_str)
			
			#print difference
			#for z in l2:
			#	print z
			break
			align_str = ''
		else:
			align_str += line
class bcolors:
        FAIL = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 0
#m = int(raw_input('Panasumo ivertis: '))
'''Test
fdssp = open('myf.dssp', 'r')
fstruct = open('myf.nodssp', 'r')

atstout = open('coolseek/atst', 'w')
atstout.write(bcolors.GREEN + '                Alfa helix H '+ bcolors.YELLOW + ' Beta strand E '+ bcolors.RESET+' Bend -'+'\n')
spalv(fdssp, fstruct, atstout, 0, 1, m)


'''# Test End


#   Atstovu atstovai
fdssp = open('../atst/atst.dssp', 'r')
fstruct = open('../atst/atst.str', 'r')
atstout = open('coolseek/atst', 'w')
atstout.write(bcolors.GREEN + '                Alfa helix H '+ bcolors.YELLOW + ' Beta strand E '+ bcolors.RESET+' Bend -'+'\n')
spalv(fstruct, fdssp, atstout, 0, 1, m)

'''##   Grupes su atstovais
for x in range(1,16):
        f1 = open('../dssp/'+str(x), 'r')
        f2 = open('../notdssp/'+str(x), 'r')
        outdssp = open('coolseek/'+str(x), 'w')
        outdssp.write(bcolors.GREEN + '                 Alfa helix '+ bcolors.YELLOW + ' Beta strand '+ bcolors.RESET+'\n')
        spalv(f1, f2, outdssp, x, 0, m)
'''
