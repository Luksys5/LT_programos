#!/usr/bin/python
import os
import subprocess
import re
import sys
from itertools import cycle

def corresponds(el1, el2):

	if int(el2[0]) <= int(el1[0]) and int(el1[0]) < int(el2[1]):
		return True
	elif int(el2[0]) < int(el1[1]) and int(el1[1]) <= int(el2[1]):
		return True

	return False

def is_anyone_in(struct1, struct2, run):
	a = b = 0
	myline = ''
	if struct1 and struct2:
		while(run):
			
			nospace_struct1 = struct1[a].split()
			nospace_struct2 = struct2[b].split()
			st_numb = nospace_struct1[0].split('-')
			nd_numb = nospace_struct2[0].split('-')
			
			if corresponds(st_numb, nd_numb) or corresponds(nd_numb, st_numb):
				struct1.remove(nospace_struct1[0] + ' ' + nospace_struct1[1] + ' ' + nospace_struct1[2] + ' ')
				a += 1; b += 1

			elif int(st_numb[0]) < int(nd_numb[0]):
				a +=1
		
			else:
				b += 1 
			
			if a >= len(struct1) or b >= len(struct2):
				run = False
		
	return struct1, struct2

def is_it_in(struct1, struct2):
	
	run = True
	a = b = 0
	new_struct1 = new_struct2 = []
	Not_found_struct = ''
	adding_struct1 = ''
	adding_struct2 = ''
	while(run):
		if a+1 == len(struct1) or b+1 == len(struct2):
			run = False
	
		st_numb = struct1[a].split('-')
		nd_numb = struct2[b].split('-')
		
		if corresponds(st_numb, nd_numb) or corresponds(nd_numb, st_numb):
			adding_struct1 += st_numb[0] + '-' + st_numb[1] + ' '
			adding_struct2 += nd_numb[0] + '-' + nd_numb[1] + ' '
			a += 1; b += 1
	
		else:
			if int(st_numb[1]) <= int(nd_numb[0]):

				Not_found_struct += struct1[a]+' '
				a += 1
			
			elif int(nd_numb[1]) <= int(st_numb[0]):

				Not_found_struct += struct2[b]+' '
				b += 1
	
	newstruct1 = adding_struct1.split()
	newstruct2 = adding_struct2.split()
	
	return newstruct1, newstruct2, Not_found_struct
	
def trunc_space(el_list, mm):
	
	run = True
	Not_found_struct = []
	new_struct = el_list
	elcycle = cycle(el_list)
	nextel = elcycle.next()
	which = 0
	
	while run:

		st_el_interval = el_list[which].split('-')
		nd_el_interval = el_list[which+1].split('-')
		margin = abs(int(st_el_interval[1]) - int(nd_el_interval[0]))

		if margin < mm: 

			interval_start = str(int(st_el_interval[0])+(margin/2))
			interval_end = str(int(nd_el_interval[1])-(margin/2))
			el_list[which] = interval_start+'-'+interval_end
			el_list.remove(el_list[which+1])
			which -= 1

		which += 1
		if which+1 == len(el_list):
			return 
	
	return

def size_align(structure1, structure2, second_atst, second_ali, measure):
	size_atst = ''; size_ali = ''
	size_diff = [];
	size_atst = ''; size_ali = '';

	for value1, value2 in zip(structure1, structure2):
		interval_vals1 = value1.split('-')
		interval_vals2 = value2.split('-')
		size1 = int(interval_vals1[1]) - int(interval_vals1[0])
		size2 = int(interval_vals2[1]) - int(interval_vals2[0])
		
		if abs(size2 - size1) > measure:

			## Adding the dssp with larger interval to array
			if size2 > size1:
				value = value2

			else:
				value = value1

			size_atst = second_atst[ int(interval_vals1[0])-1 : int(interval_vals1[1]) ] 
			size_ali = second_ali[  int(interval_vals2[0])-1 : int(interval_vals2[1]) ] 
			
			size_diff.append( value + ' ' + size_atst + ' '+ size_ali + ' ' )
			
	return size_diff

def save_alternative(struct_name, structures, second, size, place):
	f = open(place, 'a')
	f.write(Bcolors.RED+struct_name+"\n")
	for key in ('H', 'E', '-'):
	
		if key == 'H': f.write(Bcolors.GREEN)
	
		elif key == 'E': f.write(Bcolors.YELLOW) 
	
		else: f.write(Bcolors.RESET)
		
		f.write(key+' ')
		for x, y in zip(structures[key], second[key]): f.write(x+y+' ')
		f.write("\n")

		for x in size[key]:f.write(str(x)+' ')
		if size[key]: f.write("\n")
	return

def final_diffcount(measure, structure1, structure2, second_atst, second_align):

	size_dict1 = {}; size_dict2 = {}; size_dict = {}; struct_dict = {}; second_diff = {}
	size_dict1['H'] = []; size_dict2['H'] = []; struct_dict['H'] = []; second_diff['H'] = []
	size_dict1['E'] = []; size_dict2['E'] = []; struct_dict['E'] = []; second_diff['E'] = []
	size_dict1['-'] = []; size_dict2['-'] = []; struct_dict['-'] = []; second_diff['-'] = []
	atst_second_diff = []; align_second_diff = []
	last_item1 = structure1[0]; last_item2 = structure2[0];
	count_same = count_struct1 = count_struct2 = 0 
	last_number1 = last_number2 = repeat = 0
	last_struct1 = structure1[0]; last_struct2 = structure2[0]
	
	for i,( struct_item1, struct_item2 ) in enumerate(zip( structure1, structure2 )):
		## Diffs in struct size
		if last_item1 != struct_item1:

			try:
				size_dict1[last_item1].append(str(i+1-count_struct1)+'-'+str(i)+' ')
			except KeyError:
				print "Error while reading, Key: "+last_item1
			count_struct1 = 0
		
		if last_item2 != struct_item2:

			try:
				size_dict2[last_item2].append(str(i+1-count_struct2)+'-'+str(i)+' ')
			except KeyError:
				print "Error while reading, Key: "+last_item2
			count_struct2 = 0

		## differences between structure elements
		if struct_item1 != struct_item2:
			count_same += 1

		elif count_same != 0:
			if count_same > measure:
	
				if second_align[(i-count_same):i] == second_atst[(i-count_same):i]:			
					second_diff[last_item1].append(second_atst[(i-count_same):i]+' ')
		
				else:   second_diff[last_item1].append(second_atst[(i-count_same):i]+' '+second_align[(i-count_same):i])
				struct_dict[last_item1].append(str(i+1-count_same)+'-'+str(i)+' ')
		
			count_same = 0
		

		last_item1 = struct_item1; last_item2 = struct_item2
		count_struct1 += 1; count_struct2 += 1;
	
	## Searching structures size differenece Ex: 17-23 and 15-29 result in => 17-23 8
	for key in ('E', 'H', '-'):
		trunc_space( size_dict2[key], int(measure/2) )
		trunc_space( size_dict1[key], int(measure/2) )
		size_dict1[key], size_dict2[key], Nfound_struct = is_it_in(size_dict1[key], size_dict2[key] )
		size_dict[key] = size_align( size_dict1[key], size_dict2[key], second_atst, second_align, measure)
		
	is_anyone_in(size_dict['H'], size_dict['E'], True)
	is_anyone_in(size_dict['H'], size_dict['-'], True)
	is_anyone_in(size_dict['-'], size_dict['E'], True)
	
	## cleaning same difference
	is_anyone_in(size_dict['-'], struct_dict['-'], True)
        is_anyone_in(size_dict['H'], struct_dict['H'], True)
        is_anyone_in(size_dict['E'], struct_dict['E'], True)
	
	return struct_dict, size_dict, second_diff

def spalv(dssp, measure, place): 
	import sys   
	os.system("rm "+place)
	fw = open(place, 'a')
	fw.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + 
		' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
	
	name_atst = dssp.readline()[1:7].rstrip('\n')
	atst_dssp= ''; align_dssp= ''
	atst_structure = ''; align_structure = ''
	cc = 0
	
	## Reading atst dssp and structure 
	while(True):
		dssp_line = dssp.readline().rstrip('\n')
		if dssp_line.startswith('>'): 
			if not dssp_line.startswith('>'+name_atst):
				name_align = dssp_line[1:7] 
				cc = 0
				break
			cc = 1
			dssp_line = dssp.readline().rstrip('\n')

		if cc == 0:
			atst_structure += dssp_line
		else:
			atst_dssp += dssp_line
	
	## Reading align dssp and strucure 
	while(True):
                dssp_line = dssp.readline().rstrip('\n')
		if dssp_line.startswith('>') or not dssp_line:
			cc = 1
			if not dssp_line.startswith('>'+name_align) or not dssp_line:
				struct_diff, size, second_diff = final_diffcount(
					measure, atst_structure, align_structure, 
					atst_dssp, align_dssp)
				save_alternative(name_atst+"VS"+name_align, struct_diff, second_diff, size, place)
				if not dssp_line: return
				name_align = dssp_line[1:7]	

		elif cc == 0:
			align_dssp += dssp_line
		else:
			align_structure += dssp_line	

			
class Bcolors:
        RED = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 3

fdssp = open("../align_env/dali.ali")
spalv(fdssp, m, 'coolseek/atst')
