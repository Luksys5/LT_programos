#!/usr/bin/python
import os
import subprocess
import re
import sys
from itertools import cycle

def corresponds(el1, el2):
	
	if int(el2[0]) <= int(el1[0]) and int(el1[0]) < int(el2[1]):
		return True
	elif int(el2[0]) < int(el1[1]) and int(el1[1]) <= int(el2[1]):
		return True

	return False

def is_it_in(struct1, struct2):
	
	run = True
	a = b = 0
	new_struct1 = new_struct2 = []
	Not_found_struct = ''
	adding_struct1 = ''
	adding_struct2 = ''
	while(run):
		if a+1 == len(struct1) or b+1 == len(struct2):
                        run = False
	
		st_numb = struct1[a].split('-')
		nd_numb = struct2[b].split('-')
		
		if corresponds(st_numb, nd_numb) or corresponds(nd_numb, st_numb,):
			adding_struct1 += st_numb[0] + '-' + st_numb[1] + ' '
			adding_struct2 += nd_numb[0] + '-' + nd_numb[1] + ' '
			a += 1; b += 1
	
		else:
			if int(st_numb[1]) <= int(nd_numb[0]):

				Not_found_struct += struct1[a]+' '
				a += 1
			
			elif int(nd_numb[1]) <= int(st_numb[0]):

				Not_found_struct += struct2[b]+' '
				b += 1
	
	newstruct1 = adding_struct1.split()
	newstruct2 = adding_struct2.split()
	
	return newstruct1, newstruct2, Not_found_struct
	
def trunc_space(el_list):
	
	run = True
	Not_found_struct = []
	new_struct = el_list
	elcycle = cycle(el_list)
	nextel = elcycle.next()
	which = 0
	
	while run:

		st_el_interval = el_list[which].split('-')
		nd_el_interval = el_list[which+1].split('-')

		margin = abs(int(st_el_interval[1]) - int(nd_el_interval[0]))
		if margin < 4:

			interval_start = str(int(st_el_interval[0])+(margin/2))
			interval_end = str(int(nd_el_interval[1])-(margin/2))
			el_list[which] = interval_start+'-'+interval_end
			el_list.remove(el_list[which+1])
			which -= 1
		which += 1
		if which+1 == len(el_list):
			return 
	
	return

def size_align(structure1, structure2, second_atst, second_ali):

	size_diff = [];
	size_atst = ''; size_ali = '';

	for value1, value2 in zip(structure1, structure2):
		interval_vals1 = value1.split('-')
		interval_vals2 = value2.split('-')
		size1 = int(interval_vals1[1]) - int(interval_vals1[0])
		size2 = int(interval_vals2[1]) - int(interval_vals2[0])

		if abs(size2 - size1) > 4:

			## Adding the dssp with larger interval to array
			if interval_vals2[1] > interval_vals1[1]:
				value = value2
				#size_atst = second_atst[ int(interval_vals2[0])-1 : int(interval_vals2[1]) ]
				size_ali = second_ali[  int(interval_vals2[0])-1 : int(interval_vals2[1]) ]

			else:
				value = value1
				#size_atst = second_atst[ int(interval_vals1[0])-1 : int(interval_vals1[1]) ] 
				size_ali = second_ali[  int(interval_vals1[0])-1 : int(interval_vals1[1]) ] 
			
			size_diff.append(value + ' ' + size_ali + ' ' + str(abs(size2 - size1)))
			
	return size_diff

def save_alternative(structures, place):

	return

def final_diffcount(structure1, structure2, second_atst, second_align):

	struct_dict1 = {}; struct_dict2 = {}; struct_size1 = {}; struct_size2 = {}
	struct_dict1['H'] = []; struct_dict2['H'] = []
	struct_dict1['E'] = []; struct_dict2['E'] = []
	struct_dict1['-'] = []; struct_dict2['-'] = []
	struct_diff = ''
	atst_second_diff = []; align_second_diff = []
	last_item1 = structure1[0]; last_item2 = structure2[0];
	count_same = count_struct1 = count_struct2 = 0 
	last_number1 = last_number2 = 0
	last_struct1 = structure1[0]; last_struct2 = structure2[0]
	
	for i,( struct_item1, struct_item2 ) in enumerate(zip( structure1, structure2 )):
		
		if last_item1 != struct_item1:
			try:
				struct_dict1[last_item1].append(str(i+1-count_struct1)+'-'+str(i)+' ')
			except KeyError:
				print "Error while reading, Key: "+last_item1
			count_struct1 = 0
		
		if last_item2 != struct_item2:
			try:
				struct_dict2[last_item2].append(str(i+1-count_struct2)+'-'+str(i)+' ')
			except KeyError:
				print "Error while reading, Key: "+last_item2
			count_struct2 = 0

		## Searching differences betwwen two structures
		if struct_item1 != struct_item2:
			count_same += 1
		else:
			if count_same != 0:
				atst_second_diff.append(second_atst[(i-count_same):i])
				align_second_diff.append(second_align[(i-count_same):i])
				#align_second_diff += " "; atst_second_diff += " "
				struct_diff += str(i+1-count_same)+'-'+str(i)+' '
				count_same = 0

		last_item1 = struct_item1; last_item2 = struct_item2
		count_struct1 += 1; count_struct2 += 1;
	
	size_diff1 = struct_dict1; size_diff2 = struct_dict2; size_diff = {}
	
	## Searching structures differenece and size of it.Ex 17-23 and 15-29 result in => 17-23 8
	for key in ('E', 'H', '-'):
		trunc_space( size_diff2[key])
		trunc_space( size_diff1[key])
		size_diff1[key], size_diff2[key], Nfound_struct = is_it_in(size_diff1[key], size_diff2[key])
		size_diff[key] = size_align(size_diff1[key], size_diff2[key], second_atst, second_align)
		print size_diff[key]
		return struct_diff, size_diff, atst_second_diff, align_second_diff
	
	save_alternative(size_diff, struct_diff)
	return struct_diff, size_diff, atst_second_diff, align_second_diff
	

def save_diff(diff_struct, sz_struct, atst_ds, align_ds, fa):
	fa_fh = open("../../pdbs/fastas/"+fa+'_fa', 'r')
	diff_list = diff_struct.split()
	fa_line = fa_fh.readline()
	print "sequence_place, sequence of aligned_struct, sequence of atst_struct, place of aligned structure"
	
	for diff in diff_list:
		diff_nr = diff.split('-')
		sys.stdout.write(diff+' ')
		sys.stdout.write(align_ds[int(diff_nr[0])-1:int(diff_nr[1])] + ' ')
		if diff == diff_list[len(diff_list)-1]:
			sys.stdout.write( atst_ds[int(diff_nr[0])-1:int(diff_nr[1])] + '\n')
		else:
			sys.stdout.write( atst_ds[int(diff_nr[0])-1:int(diff_nr[1])] + ' ,')
		
		cc = 0
		for i, fa_char in enumerate(fa_line):
			if i < len(fa_line)-1 and fa_char == align_ds[int(diff_nr[0])-1] and fa_line[i+1] == align_ds[int(diff_nr[0])] and fa_line[i+2] == align_ds[int(diff_nr[0])+1]:
				print i+1
			cc += 1
		if cc >= i:
			print 'not found'
	return 


def spalv(struct, dssp, output, count, flag, measure): 
	import sys   
	struct_line = struct.readline().rstrip('\n')
	name_align = ''; name_atst = ''
	second_atst = ''; second_align = ''
	atst_structure = ''; align_structure = ''
	cc = 0
	Struct_ali = {}; Struct_atst = {}; null_dict = {}
	
	## Reading structure file
	while(True):
		struct_line = struct.readline().rstrip('\n')
		if struct_line.startswith('>'): break
		#print struct_line
		atst_structure += struct_line
	atst_l = list(atst_structure)
	
	## Reading dssp file
	secondary_lines = dssp.readlines()
	for lines in secondary_lines:
		if lines.startswith('>'): 
			cc += 1
			if cc > 2: break
			if cc == 1:
				name_atst = lines.rstrip('\n') 
			else:		
				name_align = lines[1:].rstrip('\n')
		else:
			if cc == 1:
				second_atst+= lines.rstrip('\n')
			else:
				second_align += lines.rstrip('\n')
	

	'''## Reading and aligning other structures'''
	while(True):
		struct_line = struct.readline().rstrip('\n')
		if struct_line.startswith('>') or not struct_line:
			align_l = list(align_structure)
			struct_diff, size, secdiff_atst, secdiff_align = final_diffcount(atst_structure, 
			align_structure, second_atst, second_align)
			#for x , y in zip(secdiff_atst, secdiff_align):
			#	print x, y
			return
			align_structure = ''
			if not struct_line: break
		else:
			align_structure += struct_line
			#save_diff(diff, size, atst_second, align_second, name_atst[1:]+'_'+name_align)
	
	return
class Bcolors:
        RED = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 0
#m = int(raw_input('Panasumo ivertis: '))
'''Test
fdssp = open('myf.dssp', 'r')
fstruct = open('myf.nodssp', 'r')

atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fdssp, fstruct, atstout, 0, 1, m)


'''# Test End


#   Atstovu atstovai
fdssp = open('../atst/atst.dssp', 'r')
fstruct = open('../atst/atst.str', 'r')
atstout = open('coolseek/atst', 'w')
atstout.write(Bcolors.GREEN + '                Alfa helix H '+ Bcolors.YELLOW + ' Beta strand E '+ Bcolors.RESET+' Bend -'+'\n')
spalv(fstruct, fdssp, atstout, 0, 1, m)

'''##   Grupes su atstovais
for x in range(1,16):
        f1 = open('../dssp/'+str(x), 'r')
        f2 = open('../notdssp/'+str(x), 'r')
        outdssp = open('coolseek/'+str(x), 'w')
        outdssp.write(Bcolors.GREEN + '                 Alfa helix '+ Bcolors.YELLOW + ' Beta strand '+ Bcolors.RESET+'\n')
        spalv(f1, f2, outdssp, x, 0, m)
'''
