#!/usr/bin/python
import os, subprocess
import re, sys
def size_diff(str1, str2, i):
	if str1 == 0: print 'error '+str(i)
	size = str(abs(str2-str1))+' '
	diff = str(i)+'-'+str(i+str2)+' '
	return size, diff
def Final_diffcount(str1, str2):
	#print str1, "\n",  str2
	str1_Hsize = 0; str2_Hsize = 0
	str1_Esize = 0; str2_Esize = 0
	str_size = ''; str_diff = ''
	size = ''; diff = ''
	for i in range(0, len(str1) ):
		if str1[i] == 'H':
			str1_Hsize += 1
			if str2_Esize > 0 and str2[i] != 'E':
				
				size, diff = size_diff(str1_Esize, str2_Esize, i)
				str2_Esize = 0; str1_Esize = 0
			
		elif str1[i] == 'E':
			str1_Esize += 1	
			if str2_Hsize > 0 and str2[i] != 'H':
				size, diff = size_diff(str1_Hsize, str2_Hsize, i)
				str1_Hsize = 0;	str2_Hsize = 0	
		
		else:
			if str2_Hsize > 0 and str2[i] != 'H':
				size, diff = size_diff(str1_Hsize, str2_Hsize, i)
				str1_Hsize = 0; str2_Hsize = 0
			
			if str2_Esize > 0 and str2[i] != 'E':
				size, diff = size_diff(str1_Esize, str2_Esize, i)
				str2_Esize = 0; str1_Esize = 0	
		str_size += size; str_diff += diff
		if str2[i] == 'H':
			str2_Hsize += 1
		elif str2[i] == 'E':
			str2_Esize += 1

	return
def align_structures(al1, al2):
	diff = ''
	x = 0
	while(True):
		if al1[x] != al2[x]:
			start = x+1
			count = -1
			while( al1[x] != al2[x] ):
				count += 1
				x += 1
				if x == len(al1):
					diff += str(start)+'-'+str(count+start)+' '
					return diff
			diff += str(start)+'-'+str(count+start)+' '	
			last = al1[x-1]
		else:
			x += 1
		if x == len(al1): return diff


def spalv(struct, dssp, output, count, flag, measure):    
	line = struct.readline()   
	atst_str = ''
	align_str = ''
	Struct_ali = {}; Struct_atst = {}; null_dict = {}
	## Reading secondary structure elements leader structure
	while(True):
		line = struct.readline().rstrip('\n')
		if re.match('^>', line): break
		atst_str += line
	atst_l = list(atst_str)
	
	## Reading other structures and aligning them 
	while(True):
		line = struct.readline().rstrip('\n')
		if not line: break
		if re.match('^>', line):
			align_l = list(align_str)
			difference = align_structures(atst_str, align_str)
			diff = Final_diffcount(atst_str, align_str)
			print difference
			break
			align_str = ''
		else:
			align_str += line
class bcolors:
        RED = '\033[91m'
        BOLD = '\033[95m'
        BLUE = '\033[94m'
        GREEN = '\033[92m'
        YELLOW = '\033[93m'
        RESET = '\033[0m'
m = 0
#m = int(raw_input('Panasumo ivertis: '))
'''Test
fdssp = open('myf.dssp', 'r')
fstruct = open('myf.nodssp', 'r')

atstout = open('coolseek/atst', 'w')
atstout.write(bcolors.GREEN + '                Alfa helix H '+ bcolors.YELLOW + ' Beta strand E '+ bcolors.RESET+' Bend -'+'\n')
spalv(fdssp, fstruct, atstout, 0, 1, m)


'''# Test End


#   Atstovu atstovai
fdssp = open('../atst/atst.dssp', 'r')
fstruct = open('../atst/atst.str', 'r')
atstout = open('coolseek/atst', 'w')
atstout.write(bcolors.GREEN + '                Alfa helix H '+ bcolors.YELLOW + ' Beta strand E '+ bcolors.RESET+' Bend -'+'\n')
spalv(fstruct, fdssp, atstout, 0, 1, m)

'''##   Grupes su atstovais
for x in range(1,16):
        f1 = open('../dssp/'+str(x), 'r')
        f2 = open('../notdssp/'+str(x), 'r')
        outdssp = open('coolseek/'+str(x), 'w')
        outdssp.write(bcolors.GREEN + '                 Alfa helix '+ bcolors.YELLOW + ' Beta strand '+ bcolors.RESET+'\n')
        spalv(f1, f2, outdssp, x, 0, m)
'''
