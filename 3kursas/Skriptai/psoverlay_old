#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------
#$Author: grazulis $
#$Date: 2000/05/12 09:21:22 $ 
#$Locker:  $
#$Revision: 1.3 $
#$Source: /home/grazulis/src/tdb/RCS/tdbtexlist,v $
#$State: Exp $
#------------------------------------------------------------------------
#*
# Overlay two PostScript (PS or EPS) files
#**

use strict;

my ($file1, $file2) = @ARGV;

sub readps
{
    my $filename = shift;

    my $signature;
    my $psversion;
    my %header;
    my @keys;
    my @prolog;
    my @setup;
    my @epilog;
    my @text;
    my @trailer;
    my @ignored;
    my $boundingbox;

    my %psfile;

    my $in_header = 0;
    my $in_prolog = 0;
    my $in_setup = 0;

    open( PSFILE, $filename ) or
	die( "could not open PostScript file '$filename' for reading: $!" );

    while( <PSFILE> ) {
	if( /%!PS-Adobe-(3\..|2\..)/../%%EndComments/ ) {
	    if(/%!PS-Adobe-(3\..|2\..) EPSF-(2\..|3\..)/) {
		$signature = $_;
		$psversion = $1;
	    } elsif(/%!PS-Adobe-(3\..|2\..)/ && ! defined $signature ) {
		$signature = $_;
		$psversion = $1;
	    } elsif( /%%BoundingBox:(.*)$/ ) {
		my $text = $1;
		if( !defined $boundingbox && $text !~ /(atend)/ ) {
		    $boundingbox = $text;
		}    
	    } elsif( /%%(.*):\s?(.*)$/ ) {
		my ($key, $text) = ($1,$2);
		if( !defined $header{$key} && $text !~ /(atend)/ ) {
		    push( @keys, $key );
		    $header{$key} = $text;
		}    
	    }
	    next;
	}
	if( $psversion =~ /2/ && /%%EndComments/../%%EndProlog/ ) {
	    if( $_ !~ /%%EndComments/ && $_ !~ /%%EndProlog/ ) {
		push( @prolog, $_ );
	    }
	    next;
	}
	if( $psversion =~ /3/ && /%%BeginProlog/../%%EndProlog/ ) {
	    if( $_ !~ /%%BeginProlog/ && $_ !~ /%%EndProlog/ ) {
		push( @prolog, $_ );
	    }
	    next;
	}
	if( /%%BeginSetup/../%%EndSetup/ ) {
	    if( $_ !~ /%%BeginSetup/ && $_ !~ /%%EndSetup/ ) {
		push( @setup, $_ );
	    }
	    next;
	}
	if( $psversion =~ /3/ && /%%Trailer/../%%EOF/ ) {
	    if( $_ !~ /%%Trailer/ && $_ !~ /%%EOF/ ) {
		if( /%%BoundingBox:(.*)$/ ) {
		    my $text = $1;
		    if( !defined $boundingbox && $text !~ /(atend)/ ) {
			$boundingbox = $text;
		    }    
		} else {
		    push( @epilog, $_ );
		}
	    }
	    next;
	}
	if( /%%BeginDocument/../%%EndDocument/ ) {
	    push( @text, $_ );
	    next;
	}
	if( /%%Begin/../%%End/ ) {
	    push( @ignored, $_ );
	    next;
	}
	next if /%%/;
	s/ showpage //g;
	s/ showpage$//g;
	s/^showpage //g;
	s/^showpage$//g;
	push( @text, $_ ) unless /^\s*$/;
    }
    close( PSFILE );

    $psfile{filename} = $filename;
    $psfile{signature} = $signature;
    $psfile{BoundingBox} = $boundingbox;
    $psfile{header} = \%header;
    $psfile{headerkeys} = \@keys;
    $psfile{prolog} = \@prolog;
    $psfile{setup} = \@setup;
    $psfile{text} = \@text;
    $psfile{ignored} = \@ignored;
    $psfile{trailer} = \@trailer;
    return \%psfile;
}

my $ps1 = readps( $file1 );
my $ps2 = readps( $file2 );

#------------------------------------------------------------------------------

if( ! defined $ps1->{header} ) {
    die( "PostScript file '$ps1->{filename}' ".
	 "does not conform 'PS-Adobe-3.0' DSC" );
}

if( ! defined $ps2->{header} ) {
    die( "PostScript file '$ps2->{filename}' ".
	 "does not conform 'PS-Adobe-3.0' DSC" );
}

if( ! defined $ps1->{BoundingBox} ) {
    die( "There is no %%BoundingBox specified ".
	 "in the EPS file '$ps1->{filename}'" );
}

if( ! defined $ps2->{BoundingBox} ) {
    die( "There is no %%BoundingBox specified ".
	 "in the EPS file '$ps2->{filename}'" );
}

print STDERR "$file1:\n";
print STDERR "prolog:  ", scalar(@{$ps1->{prolog}}), "\n";
print STDERR "setup:   ", scalar(@{$ps1->{setup}}), "\n";
print STDERR "text:    ", scalar(@{$ps1->{text}}), "\n";
print STDERR "ignored: ", scalar(@{$ps1->{ignored}}), "\n";
print STDERR "trailer: ", scalar(@{$ps1->{trailer}}), "\n";
print STDERR "\n";

print STDERR "$file2:\n";
print STDERR "prolog:  ", scalar(@{$ps2->{prolog}}), "\n";
print STDERR "setup:   ", scalar(@{$ps2->{setup}}), "\n";
print STDERR "text:    ", scalar(@{$ps2->{text}}), "\n";
print STDERR "ignored: ", scalar(@{$ps2->{ignored}}), "\n";
print STDERR "trailer: ", scalar(@{$ps2->{trailer}}), "\n";

#------------------------------------------------------------------------------

my @bb1 = split( " ", $ps1->{BoundingBox} );
my @bb2 = split( " ", $ps2->{BoundingBox} );

print "%!PS-Adobe-3.0 EPSF-3.0\n";
print "%%BoundingBox: ", $ps1->{BoundingBox}, "\n";;
## my $key;
## for $key ( @{$ps1->{headerkeys}} ) {
##     print "%%$key: $ps1->{header}{$key}\n";
## }
print "%%EndComments\n";

print "%%BeginProlog\n";
print @{$ps1->{prolog}};
print "%%EndProlog\n";
print "%%BeginSetup\n";
print @{$ps1->{setup}};
print "%%EndSetup\n";
print @{$ps1->{text}};

print "save\n";
print "gsave\n";
print "$bb1[0] $bb1[1] translate\n";
print "$bb1[1] $bb1[2] sub $bb2[1] $bb2[2] sub div\n";
print "$bb1[1] $bb1[3] sub $bb2[1] $bb2[3] sub div scale\n";
print "$bb2[0] $bb2[1] translate\n";
print "%%BeginDocument: $ps2->{filename}\n";
print @{$ps2->{prolog}};
print @{$ps2->{setup}};
print grep !/gsave [\w\.]+ (setgray )?fill grestore/, @{$ps2->{text}};
print "%%EndDocument\n";
print "grestore\n";
print "restore\n";

print "showpage\n";
print "%%Trailer\n";
print @{$ps1->{trailer}};
print @{$ps2->{trailer}};
print "%%EOF\n";
