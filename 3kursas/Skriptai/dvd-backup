#! /bin/sh
#------------------------------------------------------------------------------
#$Author: saulius $
#$Date: 2014-03-07 08:30:40 +0200 (Pn, 07 Kov 2014) $
#$Revision: 421 $
#$URL: svn://saulius-grazulis.lt/scripts/dvd-backup $
#------------------------------------------------------------------------------
#*
# Distribute data directories into several DVD discs and (optionally)
# burn them to DVDs. The script attempts to group as many
# subdirectories (datasets) into one DVD as possible, but will not
# split a small dataset that would otherwise fit into a single
# DVD. CD-ROM discs are also supported.
#** 

Id='$Id: dvd-backup 421 2014-03-07 06:30:40Z saulius $'

TMP_DIR="${TMPDIR}"

CDROM=/cdrom
CDDEV=/dev/cdrom

PRIMERA_DIR=""     # Pirectory to forward files for Primera robot
PRINT_LABELS=true  # Print labels using Primera printer?

KEEP=false
SCRIPT=false
FORMAT=dvd

CDR_SIZE=680000   # ~700 * 10^6 / 2^10
DVD_SIZE=4500000  # ~4.7 * 10^9 / 2^10

SIZE=""

DISC_NR=""
SKIP="" # discs to skip

TITLE=""
DATE="$(date +%Y-%m-%d)"
LLOGO=""
RLOGO=""
TCOLOR="" # Title color
COLOR=""  # Text color

COLORS="red green blue cyan magenta orange black"

COLOR=$(echo $COLORS | tr " " "\n" | shuf | head -n 1)
TCOLOR=$(echo $COLORS | tr " " "\n" | shuf | head -n 1)

PRINT_USER="${USER}"

#** USAGE:
#**  $0 --options dataset-directory/
#**
#** OPTIONS:
#**  --title-color red     Set title color
#**  --color  blue         Set main text color
#**       Default colors are picked randomly, to use ink uniformly.
#**
#**  -c, --cdrom /cdrom
#**       Specify a mount-point where a burned CD or DVD will be mounted for checking.
#**
#**  -d, --cd-dev /dev/cdrom
#**       Specify device for the CD/DVD burner; will be used for burning and for
#**       subsequent mounting of the CDs for checking.
#**
#**  -D, --date 2014-02-28
#**       Specify burn date to be writen on all CDs
#**
#**  -l, --left-logo, --logotipe llogo.eps
#**       Specify logotype to put on the left side
#** 
#**  -n, --disc-number 99
#**       Burn/make ISO image only for the specified disc in the whole set
#**       (defalut: burn all discs one after another). This option is usdeful
#**       to burn copies of the failed discs.
#**
#**  -p, --primera-directory where/primera/robot/disc/is/mounted/
#**       Dump iso images and disc printing labels to the Primera Barvo
#**       directory for burning by a robot; wait for the job to
#**       complete before each next burn
#**
#**  -P, --print-labels
#**       Automatically print labels on discs using Primera printer (default)
#**
#**  -P-, --dont-print-labels, --no-print-labels
#**       Do not print labels, just burn discs on Primera
#**
#**  -r, --right-logo rlogo.eps
#**       Specify logotype to put on the right side
#** 
#**  -s, --size 4500000
#**       Specify size, in bytes, for the target media. If this option is not
#**       given, the size is set to 680000 (~700 * 10^6 / 2^10) for CD-ROMs and
#**       4500000 (~4.7 * 10^9 / 2^10) for DVD-ROMs
#**
#**  -t, --title "Title of the CD"
#**       Specify title to be printed on all CDs
#**
#**  -u, --user dvdwriter
#**       Specify the user name to print on CDs (default: take the $USER value)
#**
#**  -u-, --no-user
#**       Do not print any user name on the CDs
#**
#**  --skip 99
#**       Skip disc number 99 (default: burn all discs, do not skip anything)
#**
#**  --make-dvd   Assume output discs you make are DVDs (default)
#**  --make-cd    Assume output discs you make are CDs
#**       The --make-dvd and --make-cd both set the output disc size (see --size)
#**       and pick the appropriate burning program.
#**
#**  --keep                 Keep temporary directory after exit for inspection
#**  --dont-keep            Remove temporary directories after exit (default)
#**  --tmp-directory /tmp   Use /tmp as temporary directory (default)
#**  --script               Print commands to STDOUT, do not run them
#**  --run                  Run commands, annul the previous --script (default)
#**  --help                 Print short help message (this message) and exit
while [ $# -gt 0 ]
do
  case $1 in
      --keep|--kee|--ke|--k)
          KEEP=true
	  ;;
      --dont-keep|--dont-kee|--dont-ke|--dont-k|\
      --no-keep|--no-kee|--no-ke|--no-k)
          KEEP=false
	  ;;
      --make-dvd|--make-dv|--make-d)
          FORMAT=dvd
	  ;;
      --make-cdrom|--make-cdro|--make-cdr|--make-cd|--make-c)
          FORMAT=cd
	  ;;
      -c|--cdrom|--cdro|--cdr)
          CDROM="$2"
	  shift
	  ;;
      -d|--cd-dev|--cd-de|--cd-d|--cddev|--cdde|--cdd)
          CDDEV="$2"
	  shift
	  ;;
      -D|--date|--dat|--da|--d)
          DATE="$2"
          shift
          ;;
      -l|--left-logo|--left-log|--left-lo|--left-l|--left|--lef|--le|--l)
          LLOGO="$2"
          shift
          ;;
      -n|--disc-number|--disc-numbe|--disc-numb|--disc-num|--disc-nu|\
      --disc-n|--disc|--dis|--di|--d)
          DISC_NR=$(printf "%02d" $2)
          shift
          ;;
      -r|--right-logo|--right-log|--right-lo|--right-l|\
      --right|--righ|--rig|--ri|--r)
          RLOGO="$2"
          shift
          ;;
      --skip|--ski|--sk)
          SKIP="$2"
          shift
          ;;
      -p|--primera-directory|--primera-director|--primera-directo|\
      --primera-direct|--primera-direc|--primera-dire|--primera-dir|\
      --primera-di|--primera-d|--primera|--primer|--prime|--prim)
          PRIMERA_DIR="$2"
          shift
          ;;
      -P|--print-labels|--print-label|--print-labe|--print-lab|--print-la|\
      --print-l|--print|--prin|--pri|--pr|--p)
          PRINT_LABELS=true
          ;;
      -P-|--dont-print-labels|--dont-print-label|--dont-print-labe|\
      --dont-print-lab|--dont-print-la|--dont-print-l|--dont-print|\
      --dont-prin|--dont-pri|--dont-pr|--dont-p|\
      --no-print-labels|--no-print-label|--no-print-labe|--no-print-lab|\
      --no-print-la|--no-print-l|--no-print|--no-prin|--no-pri|--no-pr|--no-p)
          PRINT_LABELS=false
          ;;
      -s|--size|--siz|--si|--s)
          SIZE=$2
	  shift
          ;;
      -t|--title|--titl|--tit|--ti|--t)
          TITLE="$2"
          shift
          ;;
      -u|--user|--use|--us|--u)
          PRINT_USER="$2"
          shift
          ;;
      -u-|--no-user|--no-use|--no-us|--no-u)
          PRINT_USER=""
          ;;
      --title-color|--title-colo|--title-col|--title-co|--title-c)
          TCOLOR="$2"
          shift
          ;;
      --color|--colo|--col|--co|--c)
          COLOR="$2"
          shift
          ;;
      --tmp-directory|--tmp-director|--tmp-directo|--tmp-direct|--tmp-direc|--tmp-dire|\
      --tmp-dir|--tmp-di|--tmp-d|--tmp|--tm|--t)
          TMP_DIR="$2"
          shift
          ;;
      --run|--ru|--r)
          SCRIPT=false
	  ;;
      --script|--scrip|--scri|--scr|--sc|--s)
          SCRIPT=true
	  ;;
      --help|--hel|--he|--h)
	  echo " "$Id
          awk '/#\*/,/#\*\*/ {
                   sub("^ *#[*]?[*]?", ""); 
                   sub("\\$0","'$(basename $0)'"); print $0
               }' $0
	  exit
	  ;;
      --options|--option)
          echo $(basename $0): "option '--options' is a place holder ;)"
          echo $(basename $0): "and should be replaced by a real option supported by the script"
          echo $(basename $0): "please use '--help' to get a list " \
              "of supported options."
          exit
          ;;
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  FILES="$FILES '$1'" ;;
    esac
    shift
done

eval set -- "${FILES}"

if [ $# -ne 1 ]
then
    echo "$0: $# args encountered:"
    echo "$0: please supply directory to be backuped on the command line" >&2
    echo "$0: Usage:" >&2
    echo "    $0 [options] dir/to/be/backuped" >&2
    exit 1
fi

if [ -z "$SIZE" ]
then
    case $FORMAT in
	cd)  SIZE=$CDR_SIZE ;;
	dvd) SIZE=$DVD_SIZE ;;
        *)   echo "$0: unknown disc size for format '$FORMAT'"
             exit -2 ;;
    esac
fi

SOURCE_DIR="$1"

BASENAME="`basename $0`"

test -z "${TMP_DIR}" && TMP_DIR="/tmp"
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

trap "test $KEEP = false && rm -rf '${TMP_DIR}'" EXIT
trap "exit 1" HUP INT QUIT TERM

TMP_CDS="${TMP_DIR}/CDs"
TMP_SETS="${TMP_DIR}/sets"
TMP_MD5="${TMP_DIR}/md5sum.dat"

mkdir ${TMP_CDS}
mkdir ${TMP_SETS}

eval set -- "$(du -ks ${SOURCE_DIR}/* | sort -n -k 1,1 \
              | sed 's/^[ \t]*[0-9][0-9]*[ \t][ \t]*//' \
              | awk '{printf "%c%s%c\n", 39, $0, 39}' \
              | tr "\n" " ")"

SUM=0
SET=01

while [ $# -gt 0 ]
do
  ## set -x
  ITEM_SIZE="$(du -ks "$1" | awk '{print $1}')"
  NEW_SUM=`expr $SUM + $ITEM_SIZE`
  ## echo $NEW_SUM, $SIZE, $SET, $1
  if [ $NEW_SUM -gt $SIZE -a $SUM -gt 0 ]
  then
      SET=`expr $SET + 1`
      SET=`printf "%02d" $SET`
      SUM=$ITEM_SIZE
  else
      SUM=$NEW_SUM
  fi

  echo "$1" >> ${TMP_SETS}/set${SET}.lst

  shift
done

## head ${TMP_SETS}/*

how_many_cds()
{
    CD_SIZE=$1
    awk 'BEGIN { n = 1 }
    {
	if( s + $1 > '$CD_SIZE' ) {
		print "cd",++n,"===";
		s=0
	}
	s+=$1;
	print s, $0
    }'
}

N=1
n=1

## set -x

for DATASET in ${TMP_SETS}/*
do

  TMP_LST="${TMP_DIR}/all-${N}.lst"

  (
      echo cd 1 ===
      cat $DATASET \
      | while read ITEM
      do
	(
	    DIRE="$(dirname "$ITEM")"
	    BASE="$(basename "$ITEM")"
	    cd "$DIRE"
	    if [ -d "$ITEM" ]
	    then
		find "${BASE}" -type f -print0 \
		    | sort -z \
		    | xargs -0 du -ks
	    else
		du -ks "${BASE}"
	    fi
	)
      done \
      | how_many_cds ${SIZE}
  ) > ${TMP_LST}

  for i in `grep === ${TMP_LST} | awk '{print $2}'`
  do
    (
	j=`expr $i + 1`
	n=`printf "%02d" $n`
        ## set -x
	awk "/^cd $i ===/,/^cd $j ===/ {print}" "${TMP_LST}" \
            | sed 's/^[ \t]*[0-9][0-9 ]*[ \t][ \t]*//' \
	    | grep -v === \
	    | awk '{print $0"="$0}' \
	    | grep -v "  ./md5sum.dat\$" \
	    | grep -v "  ./sha[0-9][0-9]*sum.dat\$" \
	    > ${TMP_CDS}/${FORMAT}$n.lst
    )
    n=`expr $n + 1`
  done

  N=`expr $N + 1`

done

NAME="`echo $FORMAT | awk '{print toupper($0)}'`"

SKIP_DISCS=""

echo "${NAME}s to be burned:"

if [ -z "${DISC_NR}" ]
then
    if [ -z "${SKIP}" ]
    then
        (
            cd ${TMP_CDS}
            ls -l
            head -n2 *.lst
        ) 
    else
        SKIP_DISCS="$(printf "${FORMAT}%02d.lst|" ${SKIP} | sed 's/|$//')"
            ## echo "SKIP_DISC =" $SKIP_DISCS
            ## ls -1 | grep -vE "${SKIP_DISCS}" | xargs ls -l
        (
            cd ${TMP_CDS}
            head -n2 `ls -1 | grep -vE "${SKIP_DISCS}"`
        )
    fi
else
    (
        cd ${TMP_CDS}
        ls -l ${FORMAT}${DISC_NR}.lst
        echo === ${FORMAT}${DISC_NR}.lst ===
        head -n2 ${FORMAT}${DISC_NR}.lst
    )
fi

## rm -rf ${TMP_DIR}; exit 0

set -u

if [ ${SCRIPT} = false ]
then

    CDCOUNT=$(ls ${TMP_CDS} | wc -l)

    for i in $(ls ${TMP_CDS}/* \
               | if [ -z "${SKIP}" ]; then cat; else grep -vE "${SKIP_DISCS}"; fi)
    do
        if [ \( -z "${DISC_NR}" -o "${TMP_CDS}/${FORMAT}${DISC_NR}.lst" = "${i}" \) ]
        then

            if [ -z "${PRIMERA_DIR}" ]
            then
                eject ${CDDEV}

                echo "$0: now about to burn disc `basename $i`"
                echo "$0: please insert blank DVD into the drive and press <ENTER>"
                read reply
            fi

            cat ${i} \
                | awk -F= '{printf "%s\0", $2}' \
                | (
	        cd ${SOURCE_DIR};
	        xargs -0 -t -n1 md5sum \
	            | grep -v  "  ./md5sum.dat\$" \
	            | grep -v "  ./sha[0-9][0-9]*sum.dat\$" \
	            | sort -k 2
                ) \
                > ${TMP_MD5}

            ABS_PATH="`cd ${TMP_CDS}; pwd`"
            ABS_FILE="${ABS_PATH}/`basename $i`"

            ABS_PATH="`cd ${TMP_DIR}; pwd`"
            TMP_MD5="${ABS_PATH}/`basename ${TMP_MD5}`"

            CDBASE=$(basename ${i} .lst)

            if [ -n "${PRIMERA_DIR}" ]
            then
                # Burn using Primera robot:
                PRIMERA_DIR="$(cd ${PRIMERA_DIR}; pwd)"
                if [ $PRINT_LABELS = true ]
                then
                    if [ -n "${LLOGO}" ]
                    then
                        LLOGO_OPTION="--left-logo ${LLOGO}"
                    else
                        LLOGO_OPTION=""
                    fi
                    if [ -n "${RLOGO}" ]
                    then
                        RLOGO_OPTION="--right-logo ${RLOGO}"
                    else
                        RLOGO_OPTION=""
                    fi
                    if [ -z "${TITLE}" ]
                    then
                        TITLE="$(basename ${SOURCE_DIR})"
                    fi
                    CDNUM=$(echo ${CDBASE} | sed 's/[^0-9]//g')
                    UCFORMAT=$(echo $FORMAT | awk '{print toupper($0)}')
                    test -n "$PRINT_USER" &&
                        PRINT_USER=" $PRINT_USER"
                    mkbmpcdlabel \
                        --color ${COLOR} \
                        --title-color ${TCOLOR} \
                        --tmp /tmp \
                        --title "{\bf ${TITLE}}" \
                        --header \
                            "\\centerline{${UCFORMAT} ${CDNUM} of $CDCOUNT}$PRINT_USER" \
                        --text "$(awk -F= '{print $2}' "${i}" \
                                  | sed 's,/.*$,,' \
                                  | sort | uniq -c \
                                  | sort -k 1,1 -nr -s \
                        )" \
                        -o "${PRIMERA_DIR}/${CDBASE}.bmp" \
                        --date "${DATE}" \
                        ${LLOGO_OPTION} \
                        ${RLOGO_OPTION}
                fi
                JOB_FILE="${PRIMERA_DIR}/${CDBASE}.jrq"
                TMP_FILE="${PRIMERA_DIR}/${CDBASE}.TMP"
                DON_FILE="${PRIMERA_DIR}/${CDBASE}.don"
                ERR_FILE="${PRIMERA_DIR}/${CDBASE}.err"
                cat > ${TMP_FILE} <<-EOF
			JobID = ${CDBASE}
			VolumeName = ${CDBASE}
			DiscType = DVDR
			ImageFile = C:\\PTBurn-jobs\\${CDBASE}.iso
			EOF
                if [ $PRINT_LABELS = true ]
                then
                    echo "PrintLabel = C:\\PTBurn-jobs\\${CDBASE}.bmp" \
                        >> ${TMP_FILE}
                fi
                cat >> ${TMP_FILE} <<-EOF
			VerifyDisc = YES
			CloseDisc = YES
			DeleteFiles = YES
			EOF
                (
	            cd ${SOURCE_DIR}
	            genisoimage -o "${PRIMERA_DIR}/${CDBASE}.iso" \
	                -v \
	                -graft-points \
	                -path-list ${ABS_FILE} \
	                -new-dir-mode 0755 \
	                -R \
	                -iso-level 4 \
	                ${TMP_MD5}
                )
                mv ${TMP_FILE} ${JOB_FILE}
                while [ ! -f "${DON_FILE}" ]
                do
                    echo "$0: $(date) waiting for the ${DON_FILE}..." 
                    sleep 10
                done
                if [ -f "${ERR_FILE}" ]
                then
                    echo $0: errors encountered while burning ${i}: >&2
                    cat "${ERR_FILE}" >&2
                    exit 3
                fi
                rm -f ${ERR_FILE}
                rm -f ${DON_FILE}
                rm -f "${PRIMERA_DIR}/${CDBASE}.iso"
                rm -f "${PRIMERA_DIR}/${CDBASE}.bmp"
            else
                if [ ${FORMAT} = cd ]
                then
                    ( 
	                cd ${SOURCE_DIR}
	                mkisofs -v \
	                    -graft-points \
	                    -path-list ${ABS_FILE} \
	                    -new-dir-mode 0755 \
	                    -R \
	                    -iso-level 4 \
	                    ${TMP_MD5}
                    ) > ${TMP_DIR}/cd.iso
                else
                    ( 
	                cd ${SOURCE_DIR}
	                growisofs -Z ${CDDEV} \
	                    -v \
	                    -graft-points \
	                    -path-list ${ABS_FILE} \
	                    -new-dir-mode 0755 \
	                    -R \
	                    -iso-level 4 \
	                    ${TMP_MD5}
                    )
                fi

                eject ${CDDEV}

                mount ${CDDEV} ${CDROM}

                ( cd ${CDROM}; md5sum -c md5sum.dat )

                umount ${CDROM}

                eject ${CDDEV}
            fi
        fi
    done

fi # if [ ${SCRIPT} = false ]
