#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author:$
#$Date:$ 
#$Locker:$
#$Revision:$
#$Source:$
#$State:$
#------------------------------------------------------------------------------
#*
#  Perl script ...
#**

use strict;

my $arg;

for $arg (@ARGV) {
    my $n = $arg; 
    print i2utf8($n), "\n";
}

sub i2utf8
{
    my $i = shift( @_ );

    ## Should test for non-numeric string i. But speed is more important here.
    if ($i <= 0x7f) { # 7 bits.
        return sprintf("%c", $i);
    } elsif ($i <= 0x7ff) { # 11 bits
        return sprintf("%c%c",
            0xc0 | (($i >> 6) & 0x1f),  # Top 5 bits.
            0x80 | ($i & 0x3f));        # Bottom 6 bits.
    } elsif ($i <= 0xffff) { # 16 bits
        return sprintf("%c%c%c",
            0xe0 | (($i >> 12) & 0x0f), # Top 4 bits.
            0x80 | (($i >> 6) & 0x3f),  # Middle 6 bits.
            0x80 | ($i & 0x3f));        # Bottom 6 bits.
    } elsif ($i <= 0x001fffff) { # 21 bits
        return sprintf("%c%c%c%c",
            0xf0 | (($i >> 18) & 0x07), # Top 3 bits.
            0x80 | (($i >> 12) & 0x3f), # Upper middle 6 bits.
            0x80 | (($i >> 6) & 0x3f),  # Lower middle 6 bits.
            0x80 | ($i & 0x3f));        # Bottom 6 bits.
    } elsif ($i <= 0x03ffffff) { # 26 bits
        return sprintf("%c%c%c%c%c",
            0xf8 | (($i >> 24) & 0x03), # Top 2 bits.
            0x80 | (($i >> 18) & 0x3f), # Upper middle 6 bits.
            0x80 | (($i >> 12) & 0x3f), # middle 6 bits.
            0x80 | (($i >> 6) & 0x3f),  # Lower middle 6 bits.
            0x80 | ($i & 0x3f));        # Bottom 6 bits.
    } elsif ($i <= 0x7fffffff) { # 31 bits
        return sprintf("%c%c%c%c%c%c",
            0xfc | (($i >> 30) & 0x01), # Top 1 bit.
            0x80 | (($i >> 24) & 0x3f), # Upper upper middle 6 bits.
            0x80 | (($i >> 18) & 0x3f), # Lower upper middle 6 bits.
            0x80 | (($i >> 12) & 0x3f), # Upper lower middle 6 bits.
            0x80 | (($i >> 6) & 0x3f),  # Lower lower middle 6 bits.
            0x80 | ($i & 0x3f));        # Bottom 6 bits.
    } else {
        return "[$i]";
    }
} # End of function i2utf8.
