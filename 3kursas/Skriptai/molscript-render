#! /bin/bash
#------------------------------------------------------------------------------
#$Author: saulius $
#$Date: 2011-06-13 15:44:36 +0300 (Pr, 13 Bir 2011) $ 
#$Revision: 214 $
#$URL: svn://saulius-grazulis.lt/scripts/molscript-render $
#------------------------------------------------------------------------------
#*
# Prepare a picture of given size and resolution from a Molscript
# script using Molscript and Render (RASTER3D).
#**

TMP_DIR="${tmp}"

set -ue
## set -x

script() { echo "# $*"; cat; }
setvar() { eval $1="'$3'"; }

setvar Id = '$Id: molscript-render 214 2011-06-13 12:44:36Z saulius $'

setvar FILES      = ""
setvar RESOLUTION = 600
setvar SIZE       = 6.0

setvar STEREO     = false
setvar CROP       = false
setvar LEFT       = false
setvar CMYK       = false
setvar KEEP       = false
setvar PSLABELS   = false
setvar BACKGROUND = default
setvar PSFONT     = ""

setvar BORDER       = 3
setvar STEREO_DIST  = 6.0
setvar STEREO_ANGLE = 6.0

# Default drawing area size for Molscript, needed for labels

setvar DEFAREA = 500

# executables

setvar PNM_TO_RGB_TIF  = pnmtotiff
setvar PNM_TO_CMYK_TIF = pnmtotiffcmyk
setvar PNM_CROP        = pnmcrop

case $0 in
    *molscript*) setvar MOLSCRIPT = molscript ;;
    *bobscript*) setvar MOLSCRIPT = bobscript ;;
esac

setvar BASENAME = "`basename $0`"

#** OPTIONS:
#**  ...
#**  --help                   print short help message (this message) and exit
while [ $# -gt 0 ]
do
  case $1 in
      -c|--crop|--cro|--cr|--c)
            CROP=true
	    ;;
      -c-|--no-crop|--no-cro|--no-cr|--no-c)
            CROP=false
	    ;;
      -k|--keep|--kee|--ke|--k)
            KEEP=true
	    ;;
      -k-|--no-keep|--no-kee|--no-ke|--no-k)
            KEEP=false
	    ;;
      -s|--stereo|--stere|--ster|--ste|--st|--s)
            STEREO=true
	    ;;
      -m|--mono|--mon|--mo|--m)
            STEREO=false
	    ;;
      -p|--pslabels|--pslabel|--pslabe|--pslab|--psla|--psl|--ps|--p)
            PSLABELS=true
	    ;;
      -p-|--no-pslabels|--no-pslabel|--no-pslabe|--no-pslab|--no-psla|\
      --no-psl|--no-ps|--no-p)
            PSLABELS=false
	    ;;
      -f|--psfont|--psfon|--psfo|--psf|--ps|--p)
            PSFONT="$2"
	    shift
	    ;;
      -s-|--no-stereo|--no-stere|--no-ster|--no-ste|--no-st|--no-s)
            STEREO=false
	    ;;
      -o|--output|--outpu|--outp|--out|--ou|--o)
            OUTPUT_TIFF=$2
	    shift
	    ;;
      -b|--background|--backgroun|--backgrou|--backgro|--backgr|--backg|\
      --back|--bac|--ba|--b)
            BACKGROUND="$2"
	    shift
	    case ${BACKGROUND} in
		white)   BACKGROUND=white ;;
		default) BACKGROUND=default ;;
		*)       echo "$0: unrecognised background value" \
                              "'${BACKGROUND}'" >&2
			 BACKGROUND=default ;;
	    esac
	    ;;
      -S|--image-size|--image-siz|--image-si|--image-s|--image|--imag|\
      --ima|--im|--i)
            SIZE=$2
	    shift
	    ;;
      -r|--resolution|--resolutio|--resoluti|--resolut|--resolu|--resol|\
      --reso|--res|--re|--r)
            RESOLUTION=$2
	    shift
	    ;;
      --cmyk|--cmy|--cm|--c)
            CMYK=true
	    ;;
      --rgb|--rg|--r)
            CMYK=false
	    ;;
      --help|--hel|--he|--h)
	    echo $Id
	    echo
	    echo "Usage:"
	    echo "    `basename $0` [options] image-description.mols"
            awk '/#\*/,/#\*\*/{sub("^ *#[*]?[*]?", ""); print $0}' $0
	    exit
	    ;;
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  FILES="$FILES '$1'" ;;
    esac
    shift
done

## echo ${FILES}
eval set -- "${FILES}"

test -z "${TMP_DIR}" && TMP_DIR="."
TMP_DIR="${TMP_DIR}/tmp-${BASENAME}-$$"
mkdir "${TMP_DIR}"

setvar TMP_RENDER_TIFF = ${TMP_DIR}/render.tif
setvar TMP_LEFT_MOLS   = ${TMP_DIR}/left.mols
setvar TMP_LEFT_PNM    = ${TMP_DIR}/left.pnm
setvar TMP_RIGHT_PNM   = ${TMP_DIR}/right.pnm

setvar TMP_LABELS_MOLS     = ${TMP_DIR}/labels.mols
setvar TMP_IMAGE_MOLS      = ${TMP_DIR}/picture.mols

setvar TMP_LABELS_PS       = ${TMP_DIR}/labels.ps
setvar TMP_LABELS_PNG      = ${TMP_DIR}/labels.png
setvar TMP_LABEL_TEXT_PPM  = ${TMP_DIR}/label-text.ppm
setvar TMP_LABEL_MASK_PGM  = ${TMP_DIR}/label-mask.pgm
setvar TMP_IMAGE_PPM       = ${TMP_DIR}/nolabels.ppm
setvar TMP_LABELED_IMG_PPM = ${TMP_DIR}/labeled-image.ppm

set -x

PIXELS=$(echo $SIZE $RESOLUTION | awk '{print int($1 * $2 / 2.54)}')
PIX_X3=$(echo $PIXELS | awk '{print int($1 * 3 / 2)}')

TILES_PER_IMAGE=50

## PIXELS_PER_TILE=$(echo $PIX_X3 | awk '{print int($1/50)}')
PIXELS_PER_TILE=$(echo $PIX_X3 $TILES_PER_IMAGE | awk '{print int($1/$2)}')

if [ "${PIXELS_PER_TILE}" -gt 64 ]
then
    PIXELS_PER_TILE=32
    TILES_PER_IMAGE=$(echo $PIX_X3 $PIXELS_PER_TILE \
	| awk '{print int($1/$2)}')
fi

R3D_PIXELS="${PIXELS_PER_TILE} ${PIXELS_PER_TILE}"
R3D_TILES="${TILES_PER_IMAGE} ${TILES_PER_IMAGE}"

function r3d_expand()
{
    set -x
      perl -pe "s/\d+ \d+\s+pixels/${R3D_PIXELS}      pixels/" "$@" \
    | perl -pe "s/\d+ \d+\s+tiles/${R3D_TILES}      tiles/" "$@" \
    | ${SET_R3D_BACKGROUND}
}

function set_white_r3d_background()
{
    perl -pe 's/\d \d \d     RGB background/1 1 1     RGB background/'
}

function change_ps_font()
{
    FONT="$1"

    perl -pe "s/Times-Roman/${FONT}/"
}

function molscript_right2left()
{

    perl -e '
        $/ = ";";

	while(<>) {
	    if( /transform/ ) {
		    chomp;
		    $_ .= " by rotation y '${STEREO_ANGLE}';";
		    print "$_";
		} else {
		    if( !eof() ) {
			    print;
			} else {
			$\ = "\n";
			chomp;
			print;
			}
		}
	}' \
    "$@"
}

function pnm_paste_stereo()
{
    setvar IMAGE1 = $1
    setvar IMAGE2 = $2

    setvar TMP_CUT   = "${TMP_DIR}/cut1.pnm"

    set -x

    X1PIXELS="$(head -n 2 ${IMAGE1} | tail -n 1 | awk '{print $1}' )"
    Y1PIXELS="$(head -n 2 ${IMAGE1} | tail -n 1 | awk '{print $2}' )"

    X2PIXELS="$(head -n 2 ${IMAGE2} | tail -n 1 | awk '{print int($1)}' )"
    Y2PIXELS="$(head -n 2 ${IMAGE2} | tail -n 1 | awk '{print int($2)}' )"

    DISTPIXELS=$(echo $STEREO_DIST $RESOLUTION \
	| awk '{print int($1 * $2 / 2.54) }')

    if [ $DISTPIXELS -ge $X2PIXELS ]
    then
	PAD=$(expr $DISTPIXELS - $X2PIXELS)
	pnmpad \
	    -white \
	    -left ${PAD} \
	    ${IMAGE2} \
	    | pnmcat \
	    -leftright \
	    ${IMAGE1} \
	    -
    else
	CUT=$(expr $X2PIXELS - $DISTPIXELS)
	CUT=$(expr $CUT / 2)
	pnmcut \
	    -left ${CUT} \
	    -right -${CUT} \
	    ${IMAGE1} \
	    > ${TMP_CUT}
    
	pnmcut \
	    -left ${CUT} \
	    -right -${CUT} \
	    ${IMAGE2} \
	    | pnmcat \
	    -leftright \
	    ${TMP_CUT} \
	    -
    fi
}

function get_marked_molscript_labels()
{
    perl -ne 'print unless /^\s*!BEGIN PICTURE/../^\s*!END PICTURE/'
}

function get_marked_molscript_picture()
{
    perl -ne 'print unless /^\s*!BEGIN LABELS/../^\s*!END LABELS/'
}

function get_unmarked_molscript_labels()
{
    perl -073 -ne \
	'print unless /^\s*(helix|coil|turn|strand|cpk|ball-and-stick|
	                    double-helix|
	                    cylinder|bonds|trace|contour|line|object)\s/xm'
}

function get_unmarked_molscript_picture()
{
    perl -073 -ne 'print unless /^\s*label\s/m'
}

function make_molscript_ps_labels()
{
    set -x

    GS_XPIXELS=$1
    GS_YPIXELS=$2

    GS_RESOLUTION=$(echo $GS_XPIXELS $DEFAREA | awk '{print 72 * $1 / $2}')

    # 2011.06.13
    #
    # The gs pngalpha rendering stopped working properly for large
    # images. The 'make_molscript_ps_labels' function works properly
    # with gs version 8.61 (on Ubuntu 8.04), but no longer with 8.71
    # (Ubuntu 10.04)
    #
    # This seems to be a konwn bug (see blow), and the suggested
    # MaxBitmap workaround seems to work.
    #
    # Saulius GraÅ¾ulis

    # http://bugs.ghostscript.com/show_bug.cgi?id=691372 :
    # 
    # Michael Witrant 2010-06-08 10:31:08 UTC
    # 
    # Created an attachment (id=6357) [details]
    # Sample A4 PDF
    # 
    # When converting a PDF to PNG using the pngalpha device, the background is
    # transparent when the resolution is below a certain value, and white when it's
    # above. The value depends on the page size of the PDF.
    #------------------------------------------------------------------------------
    # Michael Witrant 2010-06-09 23:30:28 UTC
    #
    # It looks like the transparent background doesn't work when banding is used.
    # Setting a big value to MaxBitmap is a workaround.
    #------------------------------------------------------------------------------

    gs -dNOPAUSE -dBATCH -q \
        -dMaxBitmap=$(expr ${GS_XPIXELS} \* ${GS_YPIXELS} \* 8) \
	-sDEVICE=pngalpha \
	-g${GS_XPIXELS}x${GS_YPIXELS} \
	-r${GS_RESOLUTION} \
	-sOutputFile=- \
	-
}

function overlay_molscript_ps_labels()
{
    PNG_LABEL_FILE=$1

    ## setvar TMP_LABEL_TEXT_PPM  = ${TMP_DIR}/label-text.ppm
    ## setvar TMP_LABEL_MASK_PGM  = ${TMP_DIR}/label-mask.pgm

    pngtopnm -alpha ${PNG_LABEL_FILE} > ${TMP_LABEL_MASK_PGM}
    pngtopnm        ${PNG_LABEL_FILE} > ${TMP_LABEL_TEXT_PPM}

    pnmcomp \
	-alpha=${TMP_LABEL_MASK_PGM} \
	${TMP_LABEL_TEXT_PPM} \
	-
}

function set_window()
{
    WINDOW=$1

    perl -073 -pe "s/^(\s*plot)/\$1\nwindow ${WINDOW};\n/m"
}

function render_molscript_labels()
{
    set -x

    setvar RENDER_MOLS = $1
    setvar RENDER_TIFF = $2

    if ! grep -q "^ *window " "${RENDER_MOLS}" > /dev/null
    then
	WINDOW=$((${MOLSCRIPT} < "${RENDER_MOLS}" > /dev/null) 2>&1 \
                 | awk '/setting window/{print $4}' )
	SET_WINDOW="set_window ${WINDOW}"
    else
	SET_WINDOW=cat
    fi

    if [ $MOLSCRIPT = bobscript ]
    then
	NOFRAME_CMD=" noframe"
    else
	NOFRAME_CMD="\nframe off;"
    fi

    cat "${RENDER_MOLS}" \
    | ${GET_MOLSCRIPT_LABELS} \
    | ${SET_WINDOW} \
    | perl -073 -pe \
	"s/area(\s+\d+){4}\s*;//; s/frame\s+\w+\s*;//; s/noframe//; \
         s/^(\s*plot)/\$1${NOFRAME_CMD}\narea 0 0 $DEFAREA $DEFAREA;\n/m" \
    > ${TMP_LABELS_MOLS}

    cat ${TMP_LABELS_MOLS} \
    | ${MOLSCRIPT} -s \
    | grep -v 'gsave BC fill grestore' \
    | perl -pe 's/^gs 1.0000 sg f gr//' \
    | ${CHANGE_PS_FONT} \
    > ${TMP_LABELS_PS}

    SIZE="$(tiffinfo ${RENDER_TIFF} \
	| awk '/Image Width:/ { print $3, $6 }' )"

    XPIX="$(echo ${SIZE} | awk '{print $1}' )"
    YPIX="$(echo ${SIZE} | awk '{print $2}' )"

    cat ${TMP_LABELS_PS} \
    | make_molscript_ps_labels \
	$XPIX $YPIX \
    > ${TMP_LABELS_PNG}

    overlay_molscript_ps_labels \
	${TMP_LABELS_PNG}
}

#
# Pick the right executables for the specified options
#

if [ $CMYK = true ]
then
    PNM_TO_TIF=${PNM_TO_CMYK_TIF}
else
    PNM_TO_TIF=${PNM_TO_RGB_TIF}
fi

if [ $CROP = false ]
then
    PNM_CROP=cat
fi

if [ $PSLABELS = true ]
then
    if grep -q '^ *!BEGIN LABELS' "$@" > /dev/null 2>&1
    then
	GET_MOLSCRIPT_LABELS=get_marked_molscript_labels
	GET_MOLSCRIPT_PICTURE=get_marked_molscript_picture
    else
	GET_MOLSCRIPT_LABELS=get_unmarked_molscript_labels
	GET_MOLSCRIPT_PICTURE=get_unmarked_molscript_picture
    fi
else
    GET_MOLSCRIPT_LABELS=cat
    GET_MOLSCRIPT_PICTURE=cat
fi

if [ $BACKGROUND = white ]
then
    SET_R3D_BACKGROUND=set_white_r3d_background
else
    SET_R3D_BACKGROUND=cat
fi

if [ "$PSFONT" = "" ]
then
    CHANGE_PS_FONT=cat
else
    CHANGE_PS_FONT="change_ps_font '${PSFONT}'"
fi

#
# Right picture:
#

cat "$@" \
| ${GET_MOLSCRIPT_PICTURE} \
| ${MOLSCRIPT} -s -r \
| r3d_expand \
| render -tiff ${TMP_RENDER_TIFF}

tifftopnm ${TMP_RENDER_TIFF} \
| if [ $PSLABELS = true ]
then
    render_molscript_labels "$@" ${TMP_RENDER_TIFF}
else
    cat
fi \
> ${TMP_RIGHT_PNM}

set -x

if [ $STEREO = true ]
then
    #
    # Generate left picture:
    #

    cat "$@" \
    | molscript_right2left \
    > ${TMP_LEFT_MOLS}

    cat ${TMP_LEFT_MOLS} \
    | ${GET_MOLSCRIPT_PICTURE} \
    | ${MOLSCRIPT} -s -r \
    | r3d_expand \
    | render -tiff ${TMP_RENDER_TIFF}

    tifftopnm ${TMP_RENDER_TIFF} \
    | if [ $PSLABELS = true ]
    then
	render_molscript_labels ${TMP_LEFT_MOLS} ${TMP_RENDER_TIFF}
    else
	cat
    fi \
    > ${TMP_LEFT_PNM}

    #
    # Merge the two together:
    #

    pnm_paste_stereo \
	${TMP_LEFT_PNM} \
	${TMP_RIGHT_PNM}
else
    cat ${TMP_RIGHT_PNM}
fi \
| ${PNM_CROP} \
| pnmpad \
    -white \
    -left=${BORDER} \
    -right=${BORDER} \
    -top=${BORDER} \
    -bottom=${BORDER} \
| ${PNM_TO_TIF} \
    -lzw \
    -xresolution ${RESOLUTION} \
    -yresolution ${RESOLUTION} \
> ${OUTPUT_TIFF}

if [ $KEEP = false ]
then
    rm -rf "${TMP_DIR}"
fi
