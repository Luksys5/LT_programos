#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#-----------------------------------------------------------------------
#$Author: grazulis $
#$Date: 1999/10/11 10:11:43 $ 
#$Locker: grazulis $
#$Revision: 1.0 $
#$Source: $
#$State: Exp $
#------------------------------------------------------------------------
#*
# print out the residue ranges for the match expression
#**

use strict;
use SOptions;
use SUsage;

#*USAGE:
#    pdb_match mol1.pdb mol2.pdb
#    pdb_match --match 100:200 mol1.pdb mol2.pdb
#**

#**OPTIONS:
#** -1, --first           print out residue ranges for the first molecule
#** -2, --second          print out residue ranges for the second molecule
#** -m, --match 100:200   match residues 100:200; see below for syntax
#**
#** --help, --usage            print short usage message and exit

my $first = 1;
my $match = "";

@ARGV = getOptions(
    "-1,--first"         => sub { $first = 1 },
    "-2,--second"        => sub { $first = 0 },
    "-m,--match"         => \$match,
    "--help,--usage"     => sub { SUsage::usage(); exit },
);

my @match = map {s/\s*//g;$_} map {split(",")} $match if $match;

## $\ = $, = "\n";
## print @match;

my $separator = "";

foreach (@match) {
    my ( $r1, $r2, $last1, $last2 );
    my ( $chain1, $chain2 );

    if( /^(\w?\d+):(\w?\d+)-(\w?\d+):(\w?\d+)$/ ) {
	($r1, $r2, $last1, $last2 ) = ( $1, $2, $3, $4 );
    }
    elsif( /^(\w?\d+)-(\w?\d+):(\w?\d+)-(\w?\d+)$/ ) {
	($r1, $last1, $r2, $last2 ) = ( $1, $2, $3, $4 );
    }
    elsif( /^(\w?\d+)-(\w?\d+):(\w?\d+)$/ ) {
	($r1, $last1, $r2) = ( $1, $2, $3 );
    }
    elsif( /^(\w?\d+):(\w?\d+)-(\w?\d+)$/ ) {
	($r1, $r2, $last2) = ( $1, $2, $3 );
    }
    elsif( /^(\w?\d+):(\w?\d+)$/ ) {
	($r1, $r2) = ( $1, $2 );
	($last1, $last2) = ( $1, $2 );
    }
    else {
	die("match range '$_' is incorrect");
    }
    if( $r1 =~ /^(\D)(\d+)$/ ) {
	$chain1 = $1; $r1 = $2;
    }
    if( $r2 =~ /^(\D)(\d+)$/ ) {
	$chain2 = $1; $r2 = $2;
    }
    if( defined $last1 && $last1 =~ /^(\D)(\d+)$/ ) {
	if( $chain1 ne $1 ) {
	    die( "in the match expression '$_', chains '$chain1' and '$1'".
		 " must be the same" );
	}
	$last1 = $2;
    }
    if( defined $last2 && $last2 =~ /^(\D)(\d+)$/ ) {
	if( $chain2 ne $1 ) {
	    die( "in the match expression '$_', chains '$chain2' and '$1'".
		 " must be the same" );
	}
	$last2 = $2;
    }

    if( $first ) {
	$last1 = $r1 + $last2 - $r2 if !defined $last1 and defined $last2;

	if( defined $last1 && $last1 > $r1 ) {
	    print $separator, "$r1-$last1";
	} else {
	    print $separator, "$r1";
	}
    } else {
	$last2 = $r2 + $last1 - $r1 if !defined $last2 and defined $last1;

	if( defined $last2 && $last2 > $r2 ) {
	    print $separator, "$r2-$last2";
	} else {
	    print $separator, "$r2";
	}
    }
    $separator = ",";
}

print "\n";
