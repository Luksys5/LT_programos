#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$ 
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Prepare dataset descriptions for inserting into the EMBL database;
#  output them in a CSV (comma-separated value) format.
#**

use strict;
use SOptions;
use SUsage;

my $Id = '$Id$';

my $kDa_per_aa = 0.11;

my @datasets;
my $current_dataset;

my $cryo_used;
my $crystal_sizes;
my $setup_times;
my $unit_cell_contents;
my $print_header = 1;

#*OPTIONS:
#* --cryo-used hCA=YES,sensitivase=NO
#*      Specifies projects for which cryo flash-cooling was used.
#*      Use '--cryo-used "*=NO"' to change the default from TES to NO.
#*
#* --crystal-sizes hCA=100:50:20,HhaI=150,HhaI-D123A4=100:60:120
#*      Specify typical crystal sizes, in mkm, for a project or
#*      for a specific dataset.
#*
#* --setup-times hCA=0.5,hCA1=1.0,HhaI-D123A4=1.5
#*      Experiment setup time prior to measurements, in hours.
#*      Default 0.5 hour.
#*
#* --unit-cell-contents hCA=260,hCA1=512,HhaI-D123A4=36.9kDa
#*      Unit cell contents in residues, Da or kDa.
#*
#* -h, --header, --print-header
#*	    Print the header containing names of data fields.
#*
#* -h-, --no-header, --no-print-header, --dont-print-header
#*		Turn off printing of the header.
#*
#* --help, --usage
#*      Print short uhelp message (this message) and exit.
#**

@ARGV = getOptions(
    "--cryo-used" => \$cryo_used,
    "--crystal-sizes" => \$crystal_sizes,
    "--setup-times" => \$setup_times,
    "--unit-cell-contents" => \$unit_cell_contents,
	"-h,--header,--print-header" => sub { $print_header = 1 },
	"-h-,--no-header,--no-print-header,--dont-print-header" =>
		sub { $print_header = 0 },
    "--help,--usage" => sub { SUsage::usage; exit },
);

my @cryo_used;
my @crystal_sizes;
my @setup_times;
my @unit_cell_contents;

if( defined $cryo_used ) {
    @cryo_used =
        sort { $b->[0] cmp $a->[0] }
        map { [ split( "=" ) ] }
        split( ",", $cryo_used );
}

if( defined $crystal_sizes ) {
    @crystal_sizes =
        sort { $b->[0] cmp $a->[0] }
        map { [ split( "=|:" ) ] }
        split( ",", $crystal_sizes );
}

if( defined $setup_times ) {
    @setup_times =
        sort { $b->[0] cmp $a->[0] }
        map { [ split( "=" ) ] }
        split( ",", $setup_times );
}

if( defined $unit_cell_contents ) {
    @unit_cell_contents =
        sort { $b->[0] cmp $a->[0] }
        map { [ split( "=" ) ] }
        split( ",", $unit_cell_contents );

    for my $unit_cell (@unit_cell_contents) {
        if( $unit_cell->[1] =~ /\s*kDa$/ ) {
            $unit_cell->[1] =~ s/\s*kDa$//;
            $unit_cell->[1] = round( $unit_cell->[1] );
        } elsif( $unit_cell->[1] =~ /\s*Da$/ ) {
            $unit_cell->[1] =~ s/\s*Da$//;
            $unit_cell->[1] /= 1000;
            $unit_cell->[1] = round( $unit_cell->[1] );
        } else {
            # convert amino acid count to rough estimate of Mw in kDa:
            $unit_cell->[1] *= $kDa_per_aa;
            $unit_cell->[1] = round( $unit_cell->[1] );
        }
    }
}

do {
    if( @crystal_sizes ) {
        for (@crystal_sizes) {
            local $, = " ";
            local $\ = "\n";
            print @{$_}
        }
    }
} if 0;

while(<>) {
    if(/^(DATASET)\s(.*)/) {
        $current_dataset->{$1} = $2;
    }
    if(/^(SOURCE)\s(.*)/) {
        my @beamline = split( " ", $2, 2 );
        $beamline[0] =~ s/^\s*|[\s,]*$//g;
        $current_dataset->{BEAMLN} = $beamline[0];
    }
    if( /^(DURATN)\s(.*)/ ) {
        my @duration = split( " ", $2, 2 );
        $current_dataset->{$1} += $duration[0];
    }
    if( /^(NIMAGES)\s(.*)/ ) {
        $current_dataset->{$1} += $2;
    }
    if( /^(NRESI)\s(.*)/ ) {
	my @nresidues = split( " ", $2, 2 );
	$current_dataset->{$1} = $nresidues[0];
    }
    if( /^(MTZRESO)\s+(.*)\s+FOBS.*\.mtz$/ ) {
        my @reso = split( " ", $2 );
        if( !defined $current_dataset->{MTZHIRES} ||
            $current_dataset->{MTZHIRES} < $reso[1] ) {
            $current_dataset->{MTZHIRES} = $reso[1];
        }
        if( !defined $current_dataset->{MTZLORES} ||
            $current_dataset->{MTZLORES} > $reso[0] ) {
            $current_dataset->{MTZLORES} = $reso[0];
        }
    }
    if( /^(WILSONB)\s(.*)\struncate(:?-wl\d+)?.log\s*$/ ) {
        my @wilsonb = split( " ", $2 );
        if( !defined $current_dataset->{$1} ||
            $current_dataset->{$1} < $wilsonb[0] ) {
            $current_dataset->{$1} = $wilsonb[0];
        }
    }
    if( /^(RMERGE)\s+(.*)\sscala(:?-wl\d+)?.log\s*$/ ) {
        my @completeness = split( " ", $2 );
        if( !defined $current_dataset->{$1} ||
            $current_dataset->{$1} < $completeness[0] ) {
            $current_dataset->{$1} = $completeness[0];
        }
    }
   if( /^MTZCELL/ ) {
        my @mtzcell_line = split;
        if( $mtzcell_line[-1] =~ /-wl\d/ ) {
            if( $current_dataset->{DATASET} =~ /^[^-]+-([A-Z][a-z]?)-/ ){
                $current_dataset->{HATOM} = $1;
            } else {
                $current_dataset->{HATOM} = "YES";
            }
        }
    }
    for my $key (qw( I/SIGI COMPL MULT ACOMPL AMULT ACORR)) {
        if( /^($key)\s(.*)\sscala(:?-wl\d+)?.log\s*$/ ) {
            my @value = split( " ", $2 );
            if( !exists $current_dataset->{$1} ||
                $current_dataset->{$1} > $value[0] ) {
                $current_dataset->{$1} = $value[0];
            }
            my $os_key = $1 . "_OS"; # outer shell key
            if( !exists $current_dataset->{$os_key} ||
                $current_dataset->{$os_key} > $value[1] ) {
                $current_dataset->{$os_key} = $value[1];
            }
        }
    }
    if( eof || /^\s*$/ ) {
        if( int(keys %{$current_dataset}) != 0 ) {
            push( @datasets, $current_dataset );
        }
        $current_dataset = undef;
    }
}

do {
    for my $dataset (@datasets) {
        for my $key (sort keys %{$dataset}) {
            print $key, "\t", $dataset->{$key}, "\n";
        }
        print "\n";
    }
} if 0;

#
# Print out data in CSV (Comma-Separated Value) format, in the order
# the EMBL table lists it on the web (http://www.embl-hamburg.de/,
# "Group proposal", "Datasets"):
#

my $printId = $Id;
$printId =~ s/\$//g;
print STDERR "#", $printId, "\n";

if( $print_header ) {
	print join( ",", map { "\"$_\"" } (
		'Dataset',
		'Beamline',
		'Heavy atom',
		'Cryo used',
		'Crystal length',
		'Crystal width',
		'Crystal height',
		'AU contents',
		'Resolution',
		'B-factor',
		'R-merge(I)',
		'Completeness',
		'I/sig(I)',
		'Collection time',
		'Setup time'
	) ) . "\n";
}

for my $dataset (@datasets) {
    do {
        local $\ = ",";
        print '"', $dataset->{DATASET},'"';
        print '"', $dataset->{BEAMLN},'"';
        # Heavy atom:
        if( defined $dataset->{HATOM} ) {
            print '"', $dataset->{HATOM},'"';
        } else {
            print "NULL";
        }
        # Cryo used:
        print_cryo_usage( $dataset );
        # Crystal size (microns)
        print_crystal_sizes( $dataset );
        # Content of asymm. unit [kDa]:
        print_au_contents( $dataset );
        # Resolution [Å]
        print '"', $dataset->{MTZHIRES}, '"';
        # Wilson plot B-factor [Å]^2:
        print '"', $dataset->{WILSONB}, '"';
        # R-merge(I) over-all [%]
        print '"', $dataset->{RMERGE} * 100, '"';
        # Completeness overall [%]
        print '"', $dataset->{COMPL}, '"';
        # I/s(I) outer shell:
        print '"', $dataset->{"I/SIGI_OS"}, '"';
        # Collection time (hrs.)
        print '"', $dataset->{DURATN}, '"';
    };
    # Setup time (hrs.)
    print_setup_time( $dataset );
    print "\n";
}

sub round
{
    int( $_[0] + 0.5 )
}

sub print_cryo_usage
{
    my ($dataset) = @_;

    my $default_cryo_flag = "YES";

    if( @cryo_used ) {
        my $cryo = $default_cryo_flag;
        for my $crystal_type (@cryo_used) {
            $crystal_type->[0] = ".*" if $crystal_type->[0] eq "*";
            if( $dataset->{DATASET} =~ /^$crystal_type->[0]/ ) {
                if( @{$crystal_type} == 2 ) {
                    $cryo = $crystal_type->[1];
                } else {
                    print STDERR "$0: incorrectly specified cryo system ".
                        "use flag in the '",
                        $crystal_type->[0] . "=" .
                        join( ":", @{$crystal_type}[1..
                                                    $#{$crystal_type}] ), "'" .
                                                    "value\n";
                   $cryo  = "NULL";
                }
                last
            }
        }
        if( $cryo =~ /^(YES|NO)$/ ) {
            print '"', $cryo,'"';
        } else {
            print STDERR "$0: cryosystem use flag '$cryo' should be " .
                "YES or NO, using default $default_cryo_flag value\n";
            print "\"$default_cryo_flag\"";
        }
    } else {
        print "\"$default_cryo_flag\"";
    }
}

sub print_crystal_sizes
{
    my ($dataset) = @_;

    if( @crystal_sizes ) {
        my @sizes = ( "NULL" ) x 3;
        for my $crystal_type (@crystal_sizes) {
            if( $dataset->{DATASET} =~ /^$crystal_type->[0]/ ) {
                if( @{$crystal_type} == 4 ) {
                    @sizes = @{$crystal_type}[1..3];
                } elsif( @{$crystal_type} == 3 ) {
                    @sizes = ( @{$crystal_type}[1..2],
                               $crystal_type->[2] );
                } elsif( @{$crystal_type} == 2 ) {
                    @sizes = ($crystal_type->[1])x3;
                } else {
                    print STDERR "$0: incorrect number of " .
                        "colon-separated crystal size" .
                        "components for the '",
                        $crystal_type->[0] . "=" .
                        join( ":", @{$crystal_type}[1..
                                                    $#{$crystal_type}] ), "'" .
                                                    "crystal sizes\n";
                    @sizes = ( "NULL" ) x 3;
                }
                last
            }
        }
        print '"', $sizes[0],'"';
        print '"', $sizes[1],'"';
        print '"', $sizes[2],'"';
    } else {
        print "NULL";
        print "NULL";
        print "NULL";
    }
}

sub print_au_contents
{
    my ($dataset) = @_;

    my $contents = "NULL";

    if( exists $dataset->{NRESI} ) {
	# convert amino acid count to rough estimate of Mw in kDa:
	$contents = sprintf( "%4.1f", $dataset->{NRESI} * $kDa_per_aa );
    } else {
	if( @unit_cell_contents ) {
	    for my $crystal_type (@unit_cell_contents) {
		if( $dataset->{DATASET} =~ /^$crystal_type->[0]/ ) {
		    if( @{$crystal_type} == 2 ) {
			$contents = $crystal_type->[1];
		    } else {
			print STDERR "$0: incorrectly specified AU contents" .
			    "in the '",
			    $crystal_type->[0] . "=" .
			    join( ":", @{$crystal_type}[1..$#{$crystal_type}] ),
			    "'" . "value\n";
			$contents  = "NULL";
		    }
		    last
		}
	    }
	}
    }
    print '"', $contents,'"';
}

sub print_setup_time
{
    my ($dataset) = @_;

    my $default_setup_time = 0.5;

    if( @setup_times ) {
        my $setup_time = $default_setup_time;
        for my $crystal_type (@setup_times) {
            $crystal_type->[0] = ".*" if $crystal_type->[0] eq "*";
            if( $dataset->{DATASET} =~ /^$crystal_type->[0]/ ) {
                if( @{$crystal_type} == 2 ) {
                    $setup_time = $crystal_type->[1];
                } else {
                    print STDERR "$0: incorrectly specified setup time ".
                        "in the '",
                        $crystal_type->[0] . "=" .
                        join( ":", @{$crystal_type}[1..
                                                    $#{$crystal_type}] ), "'" .
                                                    "value\n";
                    $setup_time  = $default_setup_time;
                }
                last
            }
        }
        print '"', $setup_time,'"';
    } else {
        print "\"$default_setup_time\"";
    }
}
