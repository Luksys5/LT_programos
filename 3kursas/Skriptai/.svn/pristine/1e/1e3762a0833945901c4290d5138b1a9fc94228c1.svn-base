#!/bin/sh
#------------------------------------------------------------------------
#$Author: saulius $
#$Date: 1997/10/03 22:13:56 $ 
#$Header:
#$Locker: saulius $
#$Log: ftpget,v $
#Revision 1.7  1997/10/03 22:13:56  saulius
#possibility to call script as 'ftpput' added
#
#Revision 1.6  1997/09/03 15:00:54  saulius
#'function' keyword deleted, so that the script works now also
#with "normal" sh, not only with bash
#small error in usage example corrected
#
#Revision 1.5  1997/09/02 14:06:14  saulius
#Some provisions to process wildcards added
#
#Revision 1.4  1997/09/02 12:52:18  saulius
#progress message changed
#
#Revision 1.3  1997/09/02 12:50:50  saulius
#file names with blanks should be processed correctly
#
#Revision 1.2  1997/09/02 12:45:20  saulius
#bug in option processing fixed
#usage report modified
#-- option terminator added
#
#Revision 1.1  1997/09/02 10:41:59  saulius
#Initial revision
#
#$Revision: 1.7 $
#$Source: /home/saulius/src/scripts/RCS/ftpget,v $
#$State: Exp $
#------------------------------------------------------------------------
# Transfer several files from the specified site using ftp in the
# bacground mode 
#

ID='$Id: ftpget,v 1.7 1997/10/03 22:13:56 saulius Exp saulius $'

#
# command will be GET or PUT, depending on the file name
#

CMD_NAME=`basename $0`
COMMAND=`echo $CMD_NAME | sed -e 's/ftp//'`
case $COMMAND in
 get) MESSAGE="GET file(s) from the specified ftp site in batch mode" ;;
 put) MESSAGE="PUT file(s) to the specified ftp site in batch mode" ;;
esac

usage()
{
cat <<EOF
$ID 
$MESSAGE
Usage: $CMD_NAME [options] files...

Available options are:
  -h, --help  print this help message
  -H, --host  specify the remote computer to transfer files from
              (default: taken from env variable FTP_HOST)
  -C, --dir   specify the remote directory to transfer files from
              (default: taken from env variable FTP_DIR)
  --          end of options; treat the rest of the args as filenames
Example:
  $CMD_NAME -H ftp.archive.edu -C pub/scripts ftpget-1.5.tar.gz
EOF
}

test $# = 0 && usage

set +u

FILES=""
while [ "$1" != "" ]
do
   case $1 in
      -h|--help)  usage; exit ;;
      -H|--host)  shift; FTP_HOST=$1 ;;
      -C|--dir)   shift; FTP_DIR=$1 ;;
      --) FILES="$FILES $@" ; set -- "" ;;
      -*) echo "$0: unrecognised option $1"; exit 1 ;;
       *) FILES="$FILES '$1'" ;;
   esac
   shift
done

CD_COMMAND=""; test -z "$FTP_DIR" || CD_COMMAND="cd $FTP_DIR"

eval set -- $FILES

while [ "$1" != "" ]
do
   ERRCOUNT=0
   echo ${COMMAND}ting file: "$1"
   
   TRANSFER="error?"
   while [ $TRANSFER != "OK" ]    
   do
     # try to transfer files one by one:
     ftp $FTP_HOST <<- eof-ftp > ftp.$$.errors 2>&1
	bin
	$CD_COMMAND
	$COMMAND "$1"
	quit
	eof-ftp
     cat ftp.$$.errors

     # check if there were errors: 
     if [ `wc -l < ftp.$$.errors` -gt 0 ]
     then
        ERRCOUNT=`expr $ERRCOUNT + 1`
        if [ $ERRCOUNT -gt 5 ]
        then
          echo could not continue. exiting
          rm -f ftp.$$.errors
	  exit 1
        fi
        echo trying for the `expr $ERRCOUNT + 1` time
     else
        TRANSFER="OK"
     fi
   done
   shift
done

rm -f ftp.$$.errors
