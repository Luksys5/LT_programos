#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
#  Update BibTeX entry using PubMed
#**

use strict;
use Text::BibTeX;

use Encode 'decode_utf8';

use LWP::UserAgent;
use LWP::Simple;
use HTTP::Request;
use HTTP::Headers;

use SOptions;
use SUsage;

binmode( STDIN, "utf8" );
binmode( STDOUT, "utf8" );
binmode( STDERR, "utf8" );

my $query_url = "http://eutils.ncbi.nlm.nih.gov/entrez/eutils";

my $old_priority = 1;
my $debug = 0;
my $use_page = 1;
my $use_keywords = 0;

@ARGV = getOptions( 
    "-p,--use-page"                   => sub { $use_page = 1 },
    "-p-,--dont-use-page"             => sub { $use_page = 0 },
    "--no-use-page,--no-page"         => sub { $use_page = 0 },

    "-k,--use-keywords"               => sub { $use_keywords = 1 },
    "-k-,--dont-use-keywords"         => sub { $use_keywords = 0 },
    "--no-use-keywords,--no-keywords" => sub { $use_keywords = 0 },

    "--old-priority,--merge"     => sub { $old_priority = 1 },
    "--new-priority,--overwrite" => sub { $old_priority = 0 },

    "--debug"    => sub { $debug = 1 },
    "--no-debug" => sub { $debug = 0 },

    "--help,--usage" => sub { SUsage::usage; exit },
);

undef $/; # "slurp" mode

unless( @ARGV ) {
    push( @ARGV, "-" );
    print STDERR "# $0: reading from stdin...\n" if -t STDIN;
}

foreach my $filename (@ARGV) {

    my $text;
    if( $filename ne "-" ) {
        open( BIBTEX, "<:utf8", $filename ) or
            die( "could not open file '$filename' for reading: $!" );
        $text = <BIBTEX>;
        close( BIBTEX );
    } else {
        $text = <STDIN>;
    }

    if( $text =~ /^\s*$/ ) {
        warn( "empty file '$filename'" );
        next
    }

    my @entries = map { m/^\s*$/ ? () : ( m/^\s*%/ ? $_ : "@" . $_ ) }
        split( "@", $text );

    ## my $bibfile = new Text::BibTeX::File( $filename );
    ## my $entry;
    ## while( $entry = new Text::BibTeX::Entry( $bibfile )) {

    for my $entry_text (@entries) {

        # Remove non-alphanumeric chars from BibTeX keys befor presenting
        # them to the 'btparse' BibTeX parser, to avoid syntax errors:

        $entry_text =~ s/@(\w+)\{(.*),/my $type = $1; my $key = $2;
        $key =~ s,["'{}],,g;
        "@".$type."{".$key.","/xe; #/# finish this RE for Emacs...

        if( $entry_text !~ /^@/ ) {
            print $entry_text;
            next
        }

        my $entry = new Text::BibTeX::Entry;

        $entry->parse_s( $entry_text );

        unless( $entry->parse_ok ) {
            my $entry_start = substr($entry_text,0,40);
            $entry_start =~ s/\n/ /g;
            $entry_start =~ s/\r//g;
            warn "could not parse entry ", $entry_start, "... \n";
            print $entry_text;
            next
        }

        unless( $entry->metatype == &BTE_REGULAR ) {
            print $entry_text;
            next
        }

        my $bibtex_id = $entry->key;
        my $type = $entry->type;

        my %data;

        my @fieldlist = $entry->fieldlist;
        for my $key (@fieldlist) {
	    # Insist that the names are well-formed utf8:
            $data{$key} = decode_utf8( $entry->get( $key ));
        }
        
        if( exists $data{author} && exists $data{year} &&
            ( exists $data{pages} || !$use_page ) &&
            ( !$data{title} || !$data{pages} ||
	      !$data{volume} || !$data{journal} ||
	      !$data{abstract} )) {

            my @authors = map {s/^\s+|\s+$//g; $_}
                split( " and ", $data{author} );
            my $first_author_surname;
            if( $authors[0] =~ /,/ ) {
                my @first_author = split( ',\s*', $authors[0] );
                $first_author_surname = $first_author[0];
            } else {
                my @first_author = split( ' ', $authors[0] );
                $first_author_surname = $first_author[-1];
            }

            my $first_page;

            if( $use_page ) {
                if( $data{pages} =~ /-/ ) {
                    my @first_last = split( "-+", $data{pages} );
                    $first_page = $first_last[0];
                } else {
                    $first_page = $data{pages};
                }

                $first_page =~ s/\s//g;
            }

	    my $journal;
	    if( defined $data{journal} ) {
		$journal = $data{journal};
		$journal =~ s/[^-.A-Za-z\s]//g;
	    }

            my $term = "\"$first_author_surname\"\[1AU\]" .
                " AND \"$data{year}\"\[DP\]" .
                (defined $journal ? 
		 " AND \"$journal\"\[TA\]" : "" ) .
                ($use_page ? " AND \"$first_page\"\[PG\]" : "" ) .
                (($use_keywords && defined $data{keywords}) ?
                 " AND (" . join( " OR ", map { "\"$_\"\[TW\]" } 
				  split( " ", $data{keywords} )) . ")" : "" );
            my $query = $query_url . "/esearch.fcgi?db=pubmed&term=" . $term;
            my $esearch_result = get( $query );
            sleep( 1 );
            print STDERR ">>>> $query\n" if $debug;
            my $count = ($esearch_result =~ m|<Id>(\d+)</Id>| );
            my $pubmed_id = $1;

            if( $count == 1 ) {
                ## print ">>> $pubmed_id\n";
                $query = "$query_url/efetch.fcgi?" .
                    "db=pubmed&tool=$0&email=grazulis\@ibt.lt&" .
		    "id=$pubmed_id&retmode=xml";
                $esearch_result = get( $query );
                sleep( 1 );
                ## print $esearch_result, "\n";
		if( $old_priority ) {
		    %data = ( add_pubmed_data( $esearch_result, $filename,
					       $bibtex_id ),
			      %data );
		} else {
		    %data = ( %data, 
			      add_pubmed_data( $esearch_result, $filename,
					       $bibtex_id ));
		}
                print '@', uc($type), "\{$bibtex_id,\n";
                print_bibtex_data( \%data );
                print "}\n\n";
            } elsif( $count > 1 ) {
                print STDERR "$0: $count entries found in Medline -- do not know which to pick...\n";
                print $entry_text;
            } else {
                print STDERR "$0: Id for '$term' not found in Medline\n";
                print $entry_text;
            }

        } else {
            print $entry_text;
        }

    }
}

sub print_bibtex_data
{
    my ( $data ) = @_;

    for my $key (keys %$data) {
        if( defined $data->{$key} ) {
            print "    $key = {$data->{$key}},\n"
        }
    }
}

sub add_pubmed_data
{
    my ($result, $file, $article_id)= @_;
    my %data;

    if( $result =~ m|<PubmedArticle.*?>(.*?)</PubmedArticle>|ms ) {
        my $article = $1;
        ## print "$article = $article\n";

        my $journal;
        if( $article =~ m|<Title.*?>(.*?)</Title>|ms ) {
            $data{journal} = $1;
        } else {
            print STDERR "$0: no <Title> (Journal title) " .
                "found in the file '$file'\n";
        }

        my $title;
        if( $article =~ m|<ArticleTitle.*?>(.*?)</ArticleTitle>|ms ) {
            $data{title} = $1;
        } else {
            print STDERR "$0: no <ArticleTitle> found in the file '$file' " .
                "for '$article_id'\n";
        }

        if( $article =~ m|<PubDate>(.*?)</PubDate>|ms ) {
            my $publication_date = $1;
            if( $publication_date =~ m|<Year>(.*?)</Year>|ms ) {
                $data{year} = $1;
            }
        }
        if( !defined $data{year} ) {
            print STDERR "$0: no <Year...> found for the file '$file' " .
                "for '$article_id'\n";
        }

        my $issue;
        if( $article =~ m|<Issue.*?>(.*?)</Issue>|ms ) {
            $data{number} = $1;
        }

        my $volume;
        if( $article =~ m|<Volume.*?>(.*?)</Volume>|ms ) {
            $data{volume} = $1;
        }

        my $pages = "";
        if( $article =~ m|<MedlinePgn.*?>(.*?)</MedlinePgn>| ) {
            $data{pages} = $1;
        } elsif( $article =~ m|<Pagination.*?>(.*?)</Pagination>| ){
            $pages = $1;
            $pages =~ m/(\d+\s*(:?-\s*\d+)?)/;
            $data{pages} = $1;
        } else {
            print STDERR "$0: no <MedlinePgn> or <Pagination> " .
                "found for the file '$file' for '$article_id'\n";
        }

	if( $article =~ /<AbstractText>(.*)<\/AbstractText>/ ) {
	    $data{abstract} = $1;
	}

        if( $article =~ m|<AuthorList.*?>(.*?)</AuthorList>|ms ) {
            my $author_list = $1;
        
            my $separator = "";
            while( $author_list =~ s|<Author.*?>(.*?)</Author>||ms ) {
                my $author = $1;
                $author =~ m|<LastName.*?>(.*?)</LastName>|;
                my $last = $1;
                my $first;
                if( $author =~ m|<ForeName.*?>(.*?)</ForeName>| ) {
                    $first = $1;
                } else {
                    if( $author =~ m|<FirstName.*?>(.*?)</FirstName>| ) {
                        $first = $1;
                    }
                    if( $author =~ m|<MiddleName.*?>(.*?)</MiddleName>| ) {
                        $first .= " " . $1;
                    }
                }
		if( $first =~ /[[:upper:]](\s|$)/ ) {
		    $first =~ s/([[:upper:]])\s/$1. /g;
		    $first =~ s/([[:upper:]])$/$1./g;
		}
                my $junior;
                if( $author =~ m|<Suffix.*?>(.*?)</Suffix>| ) {
                    $junior = $1;
                }
                my $author_name = $last;
                if( defined $junior ) {
                    $author_name .= ", " . $junior;
                }
                $author_name .= ", " . $first;
                $data{author} .= $separator . $author_name;
                $separator = " and ";
            }
        } # if AuthorList
    }

    for my $key (keys %data) {
	$data{$key} = decode_utf8( $data{$key} );
    }

    return %data;
}
