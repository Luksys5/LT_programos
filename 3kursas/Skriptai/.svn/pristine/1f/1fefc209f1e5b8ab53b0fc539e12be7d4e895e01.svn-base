#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;

use strict;
use File::Basename;
use Crunch;

my @macro = ();
my @commands = ();

my $auto_color_step = scalar(@ARGV);
my $auto_color = 1;

my $file;
for $file (@ARGV) {
    my $basename = basename( $file, ".pdb", ".xpl" );
    my $object = crunch( $basename, 5 );

    my $color;
    if( !open( PDB, "$file" ) ) {
	warn( "$0: could not open file '$file': $!" );
	next;
    }
    while(<PDB>) {
	last if /^ATOM|^HETATM/;
	if( /^REMARK\s+COLOR/i ) {
	    my @line = split(" ", $_, 3);
	    $color = $line[2];
	    chomp $color;
	}
	if( /^REMARK\s+O\s*COMMAND/i ) {
	    my @line = split(" ", $_, 4);
	    my $command = $line[3];
	    chomp $command;
	    push( @commands, $command );
	}
    }

    if( ! defined $color ) {
	my $red   = sprintf "%5.3f", 1 - $auto_color/$auto_color_step;
	my $green = sprintf "%5.3f", 0.7 * $auto_color/$auto_color_step;
	my $blue  = 0;
	$color = "$red $green $blue";
	$auto_color += 1;
    }

    push( @macro, "sam_atom_in $file $object" );
    push( @macro, "mol $object obj $object" );
    push( @macro, "paint_zone $object ; $color" );
    foreach (@commands) {
	push( @macro, $_ );
    }
    unless( grep /^z|^ca/, map {split} @commands ) {
	push( @macro, "ZONE ; END" );
    }
    
    @commands = ();
}

push( @macro, "!" ); 

$\ = "\n";
$, = "\n";

my $width = 0;
for( @macro ) { $width = length($_) if $width < length($_) }

printf "\@autopdb                      T        %d      %d\n", scalar(@macro), $width;
print @macro;
