#! /bin/sh
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------
#*
# This script collects metadata from a program run, typically from a
# log file, a runtime file, and a source file. The output is commented
# suitably so that it can be appended to XML, CIF files, sh scripts
# and more.
#**

#** USAGE:
#**     $0 --options --run-time run.time --log run.log source.inp >> result.dat
#**     $0 --options --run-time run.time source1.inp source2*.inp >> result.dat
#**

## set -x

ID='$Id$'

OUTPUT_FORMAT="xml"

INPUT_SOURCE=""
INPUT_LOGFILE=""
INPUT_STDOUT_FILE=""
INPUT_STDERR_FILE=""
INPUT_RUNTIME=""
INPUT_PROGRAM=""

LSCPU_OPTION=""

#** OPTIONS:
#**  -l, --log-file run.log
#**  --stdout-file  std.out
#**  --stderr-file  std.err
#**  -p, --program  program
#**  -s, --source   source.inp
#**  -t, --run-time run.time
#**      Specify additional information files and the program name that was
#**      used to produce the output.
#**
#**  --lscpu, --use-lscpu
#**      Run 'lscpu' to collect information about CPU capabilities (default)
#**
#**  --no-lscpu
#**      Do not run 'lscpu', skip CPU data collection. The 'lscpu' program
#**      can be sometimes very slow on computers with large number of cores,
#**      such as MIF cluster nodes.
#**
#**  -S, --sh-output      Produce comments suitable for /bin/sh or Perl files.
#**  -X, --xml-output     Produce comments suitable for XML files.
#**  --help               Print short help message (this message) and exit
while [ $# -gt 0 ]
do
  case $1 in
      -l|--log-file|--log-fil|--log-fi|--log-f|--log|--lo|--l)
          INPUT_LOGFILE="$2"
          shift
          ;;
      --stdout-file|--stdout-fil|--stdout-fi|--stdout-f|--stdout|\
      --stdou|--stdo)
          INPUT_STDOUT_FILE="$2"
          shift
          ;;
      --stderr-file|--stderr-fil|--stderr-fi|--stderr-f|--stderr|\
      --stder|-stde)
          INPUT_STDERR_FILE="$2"
          shift
          ;;
      -p|--program|--progra|--progr|--prog|--pro|--pr|--p)
          INPUT_PROGRAM="$2"
          shift
          ;;
      -s|--source|--sourc|--sour|--sou|--so|--s)
          INPUT_SOURCE="$2"
          shift
          ;;
      -t|--run-time|--run-tim|--run-ti|--run-t|--run|--ru|--r)
          INPUT_RUNTIME="$2"
          shift
          ;;
      -X|--xml-output|--xml-outpu|--xml-outp|--xml-out|--xml-ou|--xml-o|\
      --xml|--xm|--x)
          OUTPUT_FORMAT="xml"
          ;;
      -C|--cif-output|--cif-outpu|--cif-outp|--cif-out|--cif-ou|--cif-o|\
      --cif|--ci|--c|\
      -S|--sh-output|--sh-outpu|--sh-outp|--sh-out|--sh-ou|--sh-o|\
      --sh|--s)
          OUTPUT_FORMAT="sh"
          ;;
      --use-lscpu|--use-lscp|--use-lsc|--use-ls|--use-l|\
      --lscpu|--lscp|--lsc|--ls|--l)
          LSCPU_OPTION=""
          ;;
      --no-lscpu|--no-lscp|--no-lsc|--no-ls|--no-l)
          LSCPU_OPTION='--no-lscpu'
          ;;
      --help|--hel|--he|--h)
            awk '/#\*/,/#\*\*/ {
                    sub("^ *#[*]?[*]?", ""); \
                    gsub("\\$0","'$(basename $0)'"); \
                    print $0
                }' $0
	    exit
	    ;;      
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  FILES="$FILES '$1'" ;;
    esac
    shift
done

## echo ${FILES}
eval set -- "${FILES}"

test ${OUTPUT_FORMAT} = "xml" && echo "<!--"

(
    (
        echo "FORMAT\t"$(basename $0) \
            $(echo '$Revision$' | sed 's/\$//g; s/Revision: *//') \
            $(echo '$URL$' | sed 's/\$//g; s/URL: *//')

        echo "DATE\t$(date --utc +'%Y-%m-%d %H:%M:%S')"

        if [ -n "${INPUT_PROGRAM}" ]
        then
            echo "\nPROGRAM\t"${INPUT_PROGRAM}
        fi

        if [ $# -gt 0 ]
        then
            grep '^(# *)?PROGRAM' ${1+"$@"} | sed 's/^#//'

            echo "\nPRODUCED FROM:"
            for FILE in ${1+"$@"}
            do
                echo "\nINPUT FILE\t"${FILE}
	        grep '# *\$' ${FILE} | sed 's/\$//g; s/^#//'
            done
        fi

        if [ -n "${INPUT_SOURCE}" ]
        then
            grep -P -A3 "^(# *)?(SOURCE|INPUT) FILE" ${INPUT_SOURCE} \
                | grep -v '^-' \
                | sed 's/^# *//; s/^\(INPUT\|SOURCE\)/\nSOURCE/g' 
        fi

        if [ -n "${INPUT_RUNTIME}" ]
        then
            echo "\nRUN TIME:"
            cat ${INPUT_RUNTIME}
        fi
    ) \
    | sed 's/:  */     \t/; s/^OpenJDK /OpenJDK\t/'

    if [ -n "${INPUT_LOGFILE}" ]
    then
        echo
        awk '{print "LOG\t" $0}' < ${INPUT_LOGFILE}
    fi

    if [ -n "${INPUT_STDOUT_FILE}" ]
    then
        echo
        awk '{print "OUT\t" $0}' < ${INPUT_STDOUT_FILE}
    fi

    if [ -n "${INPUT_STDERR_FILE}" ]
    then
        echo
        awk '{print "ERR\t" $0}' < ${INPUT_STDERR_FILE}
    fi

    (
        echo "\nCOMPUTER:"
        computer-parameters ${LSCPU_OPTION} \
        | sed 's/^\(Virtualization\): */\1\t/' \
        | sed 's/^\(On-line CPU(s) list\): */\1\t/' \
        | sed 's/^\(CPU(s)\): */\1          \t/' \
        | sed 's/^\(Byte Order\): */\1      \t/'
    ) \
    | sed 's/:  */     \t/; s/^OpenJDK /OpenJDK\t/'

) \
| case ${OUTPUT_FORMAT} in
    xml) sed 's/--/-/g' ;;
    sh)  awk '{print "# " $0}' ;;
    *)   cat ;;
esac

if [ ${OUTPUT_FORMAT} = "xml" ]
then
    echo "-->"
fi

