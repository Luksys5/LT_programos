#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#-----------------------------------------------------------------------
#$Author: grazulis $
#$Date: 2000/11/06 09:19:14 $ 
#$Locker: grazulis $
#$Revision: 1.3 $
#$Source: /fs/home/grazulis/work/RCS/aligntxtdraw,v $
#$State: Exp $
#------------------------------------------------------------------------
#*
# Draw sequence alignment. Output in ASCII.
#**

use strict;
use SOptions;
use SUsage;

#*USAGE:
#    alignpsdraw mol1-mol2.align > mol1-mol2.ps
#**

my $width = 60;

#**OPTIONS:
#** -w, --width=60        print no more that 60 amino acids in one line
#** --help, --usage       print short usage message and exit

@ARGV = getOptions(
    "-w,--width"     => \$width,
    "--help,--usage" => sub { SUsage::usage(); exit },
);

my @align = ();

while(<>) {
    next if /^\s*#|^\s*$/;
    my @line = split;
    push( @align, [@line] );
}

my %amino_acids = (
    "GLY" => "G",
    "ALA" => "A",
    "VAL" => "V",
    "LEU" => "L",
    "ILE" => "I",
    "PHE" => "F",
    "TYR" => "Y",
    "PRO" => "P",
    "SER" => "S",
    "THR" => "T",
    "CYS" => "C",
    "MET" => "M",
    "TRP" => "W",
    "ASP" => "D",
    "ASN" => "N",
    "GLU" => "E",
    "GLN" => "Q",
    "ARG" => "R",
    "LYS" => "K",
    "HIS" => "H",
    "."   => ".",
    "G" => "G",
    "A" => "A",
    "V" => "V",
    "L" => "L",
    "I" => "I",
    "F" => "F",
    "Y" => "Y",
    "P" => "P",
    "S" => "S",
    "T" => "T",
    "C" => "C",
    "M" => "M",
    "W" => "W",
    "D" => "D",
    "N" => "N",
    "E" => "E",
    "Q" => "Q",
    "R" => "R",
    "K" => "K",
    "H" => "H",
);

do {
    local $\ = "\n";
    my $stretch_format = "%4s %s %4s : ";

    while( @align ) {
	my @stretch = splice( @align, 0, $width );
	my ( $first1, $last1, $first2, $last2 );
	for (@stretch) {
	    if( $_->[0] ne "." ) {
		$last1 = sprintf( "%d", $_->[0] );
		$first1 = $last1 unless defined $first1;
	    }
	    if( $_->[2] ne "." ) {
		$last2 = sprintf( "%d", $_->[2] );
		$first2 = $last2 unless defined $first2;
	    }
	}
	$first1 = "." unless $first1;
	$last1  = "." unless $last1;
	$first2 = "." unless $first2;
	$last2  = "." unless $last2;

	my $prefix1 = sprintf $stretch_format, $first1, "-", $last1;
	my $prefix2 = sprintf $stretch_format, $first2, "-", $last2;
	
	print $prefix1, map {$amino_acids{$_->[1]}} @stretch;

	printf " " x ( length($prefix1) > length($prefix2) ?
		       length($prefix1) : length($prefix2) );

	print map {$_->[1] eq $_->[3] && $_->[1] ne "." ? "|" : "."} @stretch;

	print $prefix2, map {$amino_acids{$_->[3]}} @stretch;
	print "";
    }
}
