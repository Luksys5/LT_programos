#!/bin/sh
#!perl  -w
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------
#$Author: saulius $
#$Date: 1999/11/25 13:43:24 $ 
#$Locker: saulius $
#$Log: dataplot,v $
#Revision 1.10  1999/11/25 13:43:24  saulius
#possibility to specify legend (--legend) added
#
#Revision 1.9  1999/11/25 13:33:26  saulius
#o bug fix: now correctly plots several columns on the same page
#o possibility to specify xlabel and ylabel added
#o now scans input file for keywords and extracts corresponding
#  data for TITLE, LABLES, etc.
#
#Revision 1.8  1999/11/25 12:59:42  saulius
#line style will not be enforced if not explicitely given
#
#Revision 1.7  1997/10/14 15:05:58  saulius
#possibility to add arbitrary gnuplot commands added
#
#Revision 1.6  1997/10/14 14:52:52  saulius
#"set data style lines" removed
#
#Revision 1.5  1997/10/14 13:28:42  saulius
#bug fix: functions given with '-F' option are now counted correctly
#
#Revision 1.4  1997/10/13 14:09:17  saulius
#possibility to plot functions added
#
#Revision 1.3  1997/10/10 12:47:06  saulius
#--usage option added
#
#Revision 1.2  1997/10/10 10:18:21  saulius
#possibility to plot selected columns added (option --using)
#option --title added
#
#Revision 1.1  1997/10/08 18:26:15  saulius
#Initial revision
#
#$Revision: 1.10 $
#$Source: /home/saulius/src/data-processing/RCS/dataplot,v $
#$State: Exp $
#------------------------------------------------------------------------

# plot DataProc data files using gnuplot. The output is in the
# PostScript format.

#INPUT:
#   one or several data files, in DataProc format
#
#OUTPUT:
#   PostScript file with the plots

use strict;
use lib "$ENV{HOME}/lib/perl5";

use File::Basename;
use GetOptions;

my $Id = '$Id: dataplot,v 1.10 1999/11/25 13:43:24 saulius Exp saulius $';

my $title = "";
my $tmp_dir = (defined $ENV{tmp} and -d $ENV{tmp}) ? $ENV{tmp} : "/tmp";
my $output_file = "";
my $terminal = "postscript color solid";
my $line_style = "";
my $script_only = 0;
my $grid = 0;
my $keep = 0;
my $one_plot = 0;
my @columns = (); 
my @function = ();
my @gnuplot_scripts = ();
my $xlabel = "";
my $ylabel = "";
my $zlabel = "";
my @line_title = ();
my $keypos = "";

getOptions({
    "-1"  => sub { $one_plot = 1 }, "--one-plot-per-page"  => "-1",
    "-a"  => sub { $one_plot = 0 }, "--all-plots-per-page" => "-a",
    "-c"  => \@columns,             "--columns"            => "-c",
    "-u"  => \@columns,             "--using-columns"      => "-u",
    "-g"  => sub { $grid = 1 },     "--grid"               => "-g",
    "-g-" => sub { $grid = 0 },     "--no-grid"            => "-g-",
    "-k"  => sub { $keep = 1 },     "--keep"               => "-k",
    "-k-" => sub { $keep = 0 },     "--delete"             => "-k-",
    "-l"  => \$line_style,          "--line-style"         => "-l",
    "-s"  => \$line_style,          "--style"              => "-s",
    "-o"  => \$output_file,         "--ouput"              => "-o",
    "-t"  => \$title,               "--title"              => "-t",
    "-F"  => \@function,            "--function"           => "-F",
    "-I"  => \@gnuplot_scripts,     "--include"            => "-I",
    "-T"  => \$terminal,            "--terminal"           => "-T",
    "-K"  => \$keypos,              "--key-position"       => "-K",
    "-L"  => \@line_title,          "--legend"             => "-L",

    "--no-delete"  => "--keep",
    "--no-keep"    => "--delete",

    "--xlabel"     => \$xlabel,
    "--ylabel"     => \$ylabel,
    "--zlabel"     => \$zlabel,

    "--tmp-dir"    => \$tmp_dir,
    "--run"        => sub { $script_only = 0 },
    "--script"     => sub { $script_only = 1 },
    "--version"    => sub { print "$Id\n"; exit 0 },
    "--usage"      => sub { my_usage(); exit },
    "--help"       => "--usage",
});

print(STDERR "Please give a data file name on the command line\n") && die
    if @ARGV < 1 and -t STDIN;

@columns = map { split(",") } @columns if @columns;

#---------------------------------------------------------------------------

$output_file = "-" unless $output_file or -t STDOUT; 
my $tmpfile;

my @input_files;

if( @ARGV > 0 and not grep( /^-$/, @ARGV ) ) {
    @input_files = @ARGV;
    my $basename = File::Basename::basename($ARGV[0], ".dat", ".data" );
    $output_file = "$basename.ps" unless $output_file;
} else {
    my $basename = File::Basename::basename($0);
    $tmpfile = "$tmp_dir/$basename.$$.tmp";
    @input_files = @ARGV > 0 ? 
                       map { /^-$/ ? $tmpfile : $_ } @ARGV :
                       ("$tmpfile");

    open(TMPFILE, ">$tmpfile") or
        die("Could not open '$tmpfile' for writing: $!");
    @ARGV = ("-");
    while(<>) { print TMPFILE }
    close(TMPFILE);

    $output_file = "-" unless $output_file;
}

$line_style = "lines " . $line_style if $line_style =~ /^ *[0-9] *[0-9]* *$/;
## $line_style = "lines" if not $line_style;

#------------------------------------------------------------------------------

@ARGV = @input_files;

while(<>) {
    $title = $1 if !$title && /^\s*#=?TITLE\s+(.+)$/;
    $line_style = $1 if !$line_style && /^\s*#=?LINE_STYLE\s+(.+)$/;
    $grid = $1 eq "ON" ? 1 : 0 if !defined $grid && /^\s*#=?GRID\s+(.+)$/;
    $xlabel = $1 if !$xlabel && /^\s*#=?XLABEL\s+(.+)$/;
    $ylabel = $1 if !$ylabel && /^\s*#=?YLABEL\s+(.+)$/;
    $zlabel = $1 if !$zlabel && /^\s*#=?ZLABEL\s+(.+)$/;
    $keypos = $1 if !$keypos && /^\s*#=?KEY_POSITION\s+(.+)$/;
    @line_title = split( " ", $1 ) if !@line_title && /^\s*#@(.+)$/;
}

#------------------------------------------------------------------------------

$\ = "\n";

if( $script_only ) {
    *GNUPLOT = *STDOUT;
} else {
    open(GNUPLOT, "|gnuplot") or die("Could not call gnuplot: $!");
}

print GNUPLOT "set terminal $terminal";
print GNUPLOT "set output '$output_file'" unless $output_file eq "-";
print GNUPLOT "set grid" if $grid;
print GNUPLOT "set data style lines";
print GNUPLOT "set title '$title'" if $title;
print GNUPLOT "set key $keypos" if $keypos;
print GNUPLOT "set xlabel '$xlabel'" if $xlabel;
print GNUPLOT "set ylabel '$ylabel'" if $ylabel;
print GNUPLOT "set zlabel '$zlabel'" if $zlabel;

my $script;
foreach $script (@gnuplot_scripts) {
    print GNUPLOT $script;
}

$\ = ""; $, = " ";
print GNUPLOT "plot ";

my $j = 0;
my $i;
foreach $i (0..$#input_files) {
    if( @columns ) {
	my $column;
        foreach $column (@columns) {
	    my @columns = split( ":", $column );
	    my $column_nr = @columns > 1 ? $columns[1]-1 : $columns[0]-1; 
            plot($i + $j, $input_files[$i], $line_style,
		 $line_title[$column_nr], $column );
	    $j++;
        }
    } else {
        plot($i, $input_files[$i], $line_style, $line_title[0]);
    }
}

my $funct; 
foreach $funct (@function) {
    plot_function($i++, $funct, $line_style );
}

$\ = "";
print GNUPLOT "\n";

close GNUPLOT or die("Error calling gnuplot") unless $script_only;

unlink $tmpfile if $tmpfile and not $keep;

#-----------------------------------------------------------------------------

sub plot
{
    my $filename = $_[1];
    if( $filename =~ /\.(fit|func.*)$/ ) {
        open(FUNCT, "$filename") or
            die("Cant open function file '$filename': $!");
        while(<FUNCT>) {
            next if /^\s*#|^\s*$/;
            chomp;
            $_[1] = $_;
            &plot_function;
        }
    } else {
        &plot_data;
    }
}

sub plot_data
{
    my ($nr, $file, $line_style, $line_title, $columns) = @_;
    
    print GNUPLOT ($one_plot ? "plot " : ", ") unless $nr == 0;
    print GNUPLOT "'$file' ";
    print GNUPLOT "using $columns " if $columns;
    print GNUPLOT "title '$line_title' " if $line_title;
    print GNUPLOT "with $line_style" if $line_style and ($nr == 0 or $one_plot);
    print GNUPLOT "\n" if $one_plot;
}

sub plot_function
{
    my ($nr, $function, $line_style, $line_title) = @_;
    
    print GNUPLOT ($one_plot ? "plot " : ", ") unless $nr == 0;
    print GNUPLOT "$function ";
    print GNUPLOT "title '$line_title' " if $line_title;
#    print GNUPLOT "with $function_line_style" if $nr == 0 or $one_plot;
    print GNUPLOT "\n" if $one_plot;
}

#-----------------------------------------------------------------------------

sub my_usage()
{
my $program_name = File::Basename::basename($0);
print <<EOF
$Id
Plot one or several data files using gnuplot
usage:
  $program_name [options] [file1.dat ...]

options:
 -a, --all-plots-per-page Plot all data sets on one plot (default)
 -1, --one-plot-per-page  Plot only one curve per plot (antonim for -a)
 -g, --grid               Plot the coordinate grid 
 -g-,--no-grid            Plot no grid (default)
 -k, --keep               Keep tempotatry files in the $tmp_dir
 -k-,--delete,--no-keep   Delete all temporary files (default)
 -l, --line-style         Specify the line style for plotting
 -s, --style              Specify the style for plotting data
                          (default: left for Gnuplot to decide)
 -o, --output             Specify the output file name
 -t, --title              Specify the title of your plot
 -u, --using-columns      Specify the columns to use
 -c, --columns            Specify the columns to use (same as -u)
 -T, --terminal           Specify the gnuplot terminal
                          (default: "$terminal")
 -K, --key-position 3,7   Specify the position of the legend (key)
                          (default: let Gnuplot to decide)
 -L, --legend Y,Z         Specify the legend of the graph
                          (aka key, or line title)
 
 --tmp-dir   Set the name of the directory for temporary files
             (default: $tmp_dir)
 --run       Execute the script, cancel any previous --script option
 --script    Do not call gnuplot, but output the script to the output file
 --version   Print versiom number and exit
 --usage,    Print short usage message (this message) and exit
 --help
 --license   Print program license and exit

This script is a free software. You can use, modify and distribute it
under the terms of the GNU General Public License. 
See '$program_name --license' for details.

EOF
}
