#!/bin/bash
#------------------------------------------------------------------------------
#$Author$
#$Date$
#$Revision$
#$URL$
#------------------------------------------------------------------------------

set -u

URL='$URL$'
ID='$Id$'

IMG_ROOT=""
DEBUG=0
DIRS=""
SESSION_DIR=${HOME}/writings/data-collection/datasets/data-collection-visits

while [ $# -gt 0 ]
do
    case "$1" in
	-s|--session-directory|--session-director|--session-directo\
          |--session-direct|--session-direc|--session-dire|--session-dir\
          |--session-di|--session-d|--session|--sessio|--sessi|--sess\
          |--ses|--se|--s)
	  SESSION_DIR="$2"
	  shift;
	  ;;
        -i|--image-root|--image-roo|--image-ro|--image-r|\
        --image|--imag|--ima|--im|--i)
            IMG_ROOT="$2"
            shift
            ;;
	--debug|--debu|--deb|--de|--d)
	    DEBUG=1
	    ;;
	--no-debug|--no-debu|--no-deb|--no-de|--no-d)
	    DEBUG=0
	    ;;
	-*) echo "$0: unkonwn option '$1'" >&1
	    exit -1
	    ;;
	*) DIRS="$DIRS '$1'"
	    ;;
    esac
    shift
done

echo "#"
echo "#" Produced by the script:
echo "#"
echo "#"$ID  | sed -e 's/\$//g'
echo "#"$URL | sed -e 's/\$//g'
echo "#"

if [ $DEBUG = "1" ]
then
    set -x
fi

eval set -- "${DIRS}"

for BASE_DIR
do
    HKLDAT_DIR=${BASE_DIR}/hkldata
    MOSFLM_DIRS=$(echo ${BASE_DIR}/*mosflm)

    for MOSFLM_DIR in ${MOSFLM_DIRS}
    do
	IMAGES_DIR=${MOSFLM_DIR}/images
	MOSFLM_LOGS=${MOSFLM_DIR}/mosflm*.log
	SCALA_DIR=${MOSFLM_DIR}
	SCALA_LOGS=${SCALA_DIR}/scala*.log
	TRUNCATE_DIR=${MOSFLM_DIR}
	TRUNCATE_LOGS=${TRUNCATE_DIR}/truncate*.log
	FOBS_MTZ=${MOSFLM_DIR}/outputs/FOBS*.mtz

	DATASET=$(basename ${BASE_DIR})

	echo ""
	echo -e "DATASET\t${DATASET}"

	if [ "$(echo ${SESSION_DIR}/*/lists/datasets.txt)" != \
             "${SESSION_DIR}/*/lists/datasets.txt" ]
	then
	    SESSION=$(grep -l ${DATASET} ${SESSION_DIR}/*/lists/datasets.txt)
	    NSESSIN=$(grep -l ${DATASET} ${SESSION_DIR}/*/lists/datasets.txt \
	        | wc -l)
	else
	    # /media/disk-1/images/2010.11.10-EMBL-DESY-Hamburg/processing/X13/carboanhydrases/hCA1-E45-L731A8/mosflm
	    SESSION=${BASE_DIR}
	    NSESSIN=1
	fi

	if [ ${NSESSIN} -gt 1 ]
	then
	    echo "Dataset ${DATASET} is present more than in one session:"
	    echo ${SESSION}
	    exit 1;
	elif [ ${NSESSIN} -eq 1 ]
	then
	    if [ "$(echo ${SESSION_DIR}/*/lists/datasets.txt)" != \
             "${SESSION_DIR}/*/lists/datasets.txt" ]
            then
		SESS_NAME=$(echo ${SESSION} | awk -F/ '{print $(NF-2)}')
		DATES=$(echo ${SESS_NAME} | awk -F- '{print $1 "-" $2}')
		LOCAT=$(echo ${SESS_NAME} | awk -F- '{print $3}')
		SOURCE=$(grep "/${DATASET}$" ${SESSION} | awk -F/ '{print $(NF-1)}')
	    else
		SESS_NAME=$(echo ${SESSION} | awk -F/ '{print $(NF-4)}')
		DATES=$(echo ${SESS_NAME} | awk -F- '{print $1}')
		LOCAT=$(echo ${SESS_NAME} | awk -F- '{print $NF}')
		SOURCE=$(echo ${SESSION} | awk -F/ '{print $(NF-2)}')
	    fi

	    if [ ${LOCAT} = "Hamburg" ]
	    then
		case ${SOURCE} in
		    X11|X12|X13|X31|BW7A|BW7B)
			ORGANISATION="DESY/EMBL" ;;
		    BW6)
			ORGANISATION="DESY/MPG" ;;
		    *)
			ORGANISATION="DESY/???" ;;
		esac
	    elif [ ${LOCAT} = "Vilnius" ]
	    then
		ORGANISATION="IBT"
	    elif [ ${LOCAT} = "Warshaw" ]
	    then
		ORGANISATION="IIMCB"
	    else
		ORGANISATION="???"
	    fi

	    case ${SOURCE} in
		X11|X12|X13|X31|BW7A|BW7B|BW6)
		    SOURCE="${SOURCE}, DORIS"
	    esac

	    echo -e "SESSION\t${LOCAT}, ${ORGANISATION}, ${DATES}"
	    echo -e "SOURCE\t${SOURCE}"
	fi

	for LOG in ${MOSFLM_DIR}/mosflm*.log
	do
	    if [ -f ${LOG} ]
	    then
		grep -E "^ *===>  *TEMPL.*  *" ${LOG} \
		    | sed -e 's/^ *===>  *//' \
		    | sed -e 's/TEMPL.*  */TEMPL\t/' \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		grep -E "^ *Wavelength  *[0-9]" ${LOG} \
		    | sed -e 's/^ *Wavelength  */WAVEL\t/' \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${LOG})/" \
		    | uniq

		grep -E "^ *===>  *BEAM  *[0-9]" ${LOG} \
		    | sed -e 's/^ *===>  *//' \
		    | sed -e 's/BEAM  */BEAM\t/' \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		grep -E "^ *Crystal to detector distance \(DIST\)  *[0-9]" \
		        ${LOG} \
		    | sed -e \
		        's/^ *Crystal to detector distance (DIST)  */DIST\t/' \
		    | sed -e 's/ *mm *$//' \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${LOG})/" \
		    | uniq

		grep -E "^ *===>  *IDENT.*  *" ${LOG} \
		    | sed -e 's/^ *===>  *//' \
		    | sed -e 's/IDENT.*  */IDENT\t/' \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${LOG})/"

		grep -E "^ *===>  *MOSAIC.*  *[0-9]" ${LOG} \
		    | sed -e 's/^ *===>  *//' \
		    | sed -e 's/MOSAIC.*  */MOSAIC\t/' \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${LOG})/"

		grep -E "^ *===>  *PROCESS  *[0-9]" ${LOG} \
		    | sed -e 's/^ *===>  *//' \
		    | sed -e 's/PROCESS */PROCESS\t/' \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"
	    fi
	done

	if [ -d ${IMAGES_DIR} ]
	then

            if [ -n "${IMG_ROOT}" ]
            then
	        WILDCARD="${IMG_ROOT}[-_]*[0-9][0-9][0-9].{mar*,mccd*,osc*,ima*}"
            else
	        WILDCARD="${DATASET}[-_]*[0-9][0-9][0-9].{mar*,mccd*,osc*,ima*}"
            fi

	    IMAGE_RANGES=$(eval "shopt -s nullglob; \
                           cd ${IMAGES_DIR}; \
                           ls -1t ${WILDCARD}" \
		| sed -e 's/\(.*\)[-_]\([0-9][0-9]*\)\..*/\1/' \
		| sort | uniq )

 	    ## echo ${IMAGE_RANGES}

	    NIMAGES=0
	    DETECTOR=""
	    DETECTORS=""

	    for RANGE in ${IMAGE_RANGES}
	    do
		RANGE_WILDCARD="${RANGE}[-_]*[0-9][0-9][0-9].{mar*,mccd*,osc*,ima*}"

		FIRST_NUMBER0=$(eval "shopt -s nullglob; \
                           cd ${IMAGES_DIR}; \
                           ls -1 ${RANGE_WILDCARD}" \
                    | grep -iv '\.tmp$' \
	            | sed -e 's/\(.*\)[-_]\([0-9][0-9]*\)\..*/\2/' \
	            | sort -n \
                    | head -n1)

		FIRST_NUMBER=$(echo ${FIRST_NUMBER0} | sed -e 's/^0*//')

		LAST_NUMBER0=$(eval "shopt -s nullglob; \
                           cd ${IMAGES_DIR}; \
                           ls -1 ${RANGE_WILDCARD}" \
                    | grep -iv '\.tmp$' \
	            | sed -e 's/\(.*\)[-_]\([0-9][0-9]*\)\..*/\2/' \
	            | sort -n \
                    | tail -n1)

		LAST_NUMBER=$(echo ${LAST_NUMBER0} | sed -e 's/^0*//')

		NIMAGES=$(expr ${NIMAGES} + ${LAST_NUMBER} - ${FIRST_NUMBER} + 1)
	    
		case ${RANGE_WILDCARD} in
		    .mar2560) DET_NOW="mar555"
		esac

		echo -en "RANGE\t"
		echo -e ${RANGE} "\t" ${FIRST_NUMBER}-${LAST_NUMBER}

		FIRST_IMAGE=$(eval "shopt -s nullglob; \
                           cd ${IMAGES_DIR}; \
                           ls -1 ${RANGE}[-_]${FIRST_NUMBER0}.*" \
		    | tail -n1)

		EXTENSION=$(echo $FIRST_IMAGE \
		    | awk '{print $1}' \
		    | awk -F. '{print $NF}')

		LAST_IMAGE=$(eval "shopt -s nullglob; \
                           cd ${IMAGES_DIR}; \
                           ls -1 ${RANGE}[-_]${LAST_NUMBER0}.*${EXTENSION}" \
		    | tail -n1)

	        ## echo -e "IMGS\t${FIRST_IMAGE} ${LAST_IMAGE}"

		FIRST_IMG_DATE=$(cd ${IMAGES_DIR}; \
		    ls -l --time-style=long ${FIRST_IMAGE} \
		    | awk '{print $6, $7}')

		LAST_IMG_DATE=$(cd ${IMAGES_DIR}; \
		    ls -l --time-style=long ${LAST_IMAGE} \
		    | awk '{print $6, $7}')

		echo -e "DSTART\t${FIRST_IMG_DATE}"
		echo -e "DEND\t${LAST_IMG_DATE}"

		FIRST_IMG_SEC=$(cd ${IMAGES_DIR}; \
		    ls -l --time-style=+%s ${FIRST_IMAGE} \
		    | awk '{print $6}')

		LAST_IMG_SEC=$(cd ${IMAGES_DIR}; \
		    ls -l --time-style=+%s ${LAST_IMAGE} \
		    | awk '{print $6}')

		echo -ne "DURATN\t"
		echo $(echo $LAST_IMG_SEC $FIRST_IMG_SEC \
                    | awk '{printf "%4.2f %s\n", ($1-$2)/3600, "hours"}')
	    done

	    FORMATS=$(eval "shopt -s nullglob; \
                        cd ${IMAGES_DIR}; \
                        ls -1 ${WILDCARD}" \
                | grep -iv '\.tmp$' \
		| awk -F. \
		    '{if(NF>2){print "." $(NF-1)"." $NF}else{print $NF}}' \
		| sort | uniq)

	    echo -e "NIMAGES\t${NIMAGES}"
	    echo -ne "IMFMT\t"
	    echo ${FORMATS}
	fi

	for LOG in ${SCALA_LOGS}
	do
	    if [ -f ${LOG} ]
	    then
	    ## scala-stats ${LOG} | awk '{print "SCALA\t" $0}'
	    ## echo -ne "RMRGTAB\t"
	    ## scala-stats ${LOG} \
	    ## | awk '/^  *Overall:/{print $2}'
		awk '/^ *Low resolution limit/{print "LOWRES\t" $4 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *High resolution limit/{print "HIRES\t" $4 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Anomalous completeness  *[0-9]/ \
                        {print "ACOMPL\t" $3 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Anomalous multiplicity  *[0-9]/ \
                        {print "AMULT\t" $3 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *DelAnom correlation between half-sets/ \
                     {print "ACORR\t" $5 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Rmeas \(within I\+\/I-\) *[0-9]/ \
                     {print "RMEAS\t" $4 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Mean\(\(I\)\/sd\(I\)\) *[0-9]/ \
                    {print "I/SIGI\t" $2 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Rmerge  *[0-9]/{print "RMERGE\t" $2 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Completeness  *[0-9]/{print "COMPL\t" $2 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

		awk '/^ *Multiplicity  *[0-9]/{print "MULT\t" $2 "\t" $NF}' \
		    ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${LOG})/"

	    fi
	done

	for LOG in ${TRUNCATE_LOGS}
	do
	    if [ -f ${LOG} ]
	    then
		echo -ne "WILSONB\t"
		awk '/^  *LSQ Line Gradient/{printf "%3.1f\n", -$5}' ${LOG} \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${LOG})/"
		echo -ne "NRESI\t"
		echo -e \
		    $(awk '/^  *Data line---     NRESIDUES/{print $NF}' \
		    ${LOG})"\t\t"$(basename ${LOG})
	    fi
	done

	for MTZ in ${FOBS_MTZ}
	do
	    if [ -f ${MTZ} ]
	    then
		echo -ne "MTZRESO\t"
		mtzresolution ${MTZ} \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${MTZ})/"
	    fi
	done

	for MTZ in ${FOBS_MTZ}
	do
	    if [ -f ${MTZ} ]
	    then
		echo -ne "MTZSYMM\t"
		mtzsymm ${MTZ} \
		    | sed -e "s/^\(.*\)$/\1\t\t$(basename ${MTZ})/"
	    fi
	done

	for MTZ in ${FOBS_MTZ}
	do
	    if [ -f ${MTZ} ]
	    then
		echo -ne "MTZCELL\t"
		mtzcell ${MTZ} \
		    | sed -e 's/^ *//g' \
		    | sed -e "s/^\(.*\)$/\1\t$(basename ${MTZ})/"
	    fi
	done
    done
done
