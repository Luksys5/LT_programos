#!/bin/sh
#------------------------------------------------------------------------------
#$Author: saulius $
#$Date: 2014-06-24 10:49:47 +0300 (An, 24 Bir 2014) $
#$Revision: 457 $
#$URL: svn://saulius-grazulis.lt/scripts/limit-time $
#------------------------------------------------------------------------------
#*
# Run a program or a script, allocating limited wall clock time to
# it. This is needed to terminate some hanging processes, e.g. from
# obabel.
#
# USAGE:
# $0 50 obabel -iSDF inp.sdf -o SVG -O out.svg
# # This limits runtime for 'obabel' to 50 seconds (the first argument)
#**

# At the moment, this script does not run nicely with bash, since bash
# makes us a "service" and very verbosely reports when the background
# sentinel process is terminated by our signal. And it does not report
# when the main process is terminated, either due to time limit or a
# signal... In other words, bash does exactely the opposite of what we
# need. Anyway, it works with /bin/sh (dash?) S.G.

# set -x

TIME=$1
shift

HOST=$(hostname -s)
BASE=$(basename $0)

PIDFILE=${HOST}-${BASE}-$$.pid;
SIDFILE=${HOST}-${BASE}-$$.sid;

# start our process in the background with a CPU time limit:

( ulimit -t ${TIME}; ${1+"$@"} ) &
PID=$!
echo $PID > $PIDFILE;

# Start a "sentinel" process that will kill the '${1+"$@"} &' task if
# it does not terminate in time. '$SID' is a 'sentinel PID' here:
(
    ## set -x
    sleep ${TIME} 2> /dev/null 
    ## PID=$(test -f ${PIDFILE} && cat $PIDFILE)
    if [ -f $PIDFILE ]
    then
        echo "$0: killing process $PID (running '${1+$@}')" \
            "after exceeding ${TIME}s wall-clock limit" >&2
        kill -9 $PID
    fi
    rm -f $SIDFILE
) &
SID=$!
echo $SID > $SIDFILE

wait $PID
STATUS=$?

rm $PIDFILE

if [ -f $SIDFILE ]
then
    # Kill the children processes of the sentinel, which is 'sleep',
    # to terminate the sentinel:
    ps -ef \
    | awk '$3=='$SID' {print $2}' \
    | xargs --no-run-if-empty kill
fi

if [ $STATUS -ne 0 ]
then
    echo "$0: process $PID running '${1+$@}' failed (status $STATUS)" >&2
fi
