#!/bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------
#$Author: saulius $
#$Date: 2006-05-04 17:33:01 +0300 (Thu, 04 May 2006) $ 
#$Revision: 1019 $
#$URL: svn+ssh://lokys.ibt.lt/home/saulius/svn-repositories/cce/bin/mktestdepend $
#------------------------------------------------------------------------------
#*
# create dependencies for .com files
#**

use strict;
use File::Basename;

my @inputs  = ();
my @outputs = ();
my @outdirs = ();
my %vars = %ENV;

sub expand_vars
{
    my ( $line, $vars ) = @_;

    chomp $line;
    my ( $varname, $value ) = split( "=", $line, 2 );

    $varname =~ s/^\s*set(var)?\s+//; # remove 'set ', if we are in csh
    $varname =~ s/^\s+|\s+$//g;       # remove leading and trailing spaces from variable name

    $value =~ s/^\s+|\s+$//g;       # remove leading and trailing spaces

    if( $value !~ /\'.+\'/ || $value =~ /^".+"$/ ) {

	$value =~ s/\$(\w+)/\$\{$1\}/g; # eclose var names in braces: $NAME -> ${NAME}

	#
	# expand simple variables: VAR=val; ${VAR} -> val
	#
	my $oldvarname;
	for $oldvarname ( keys %{$vars} ) {
	    $value =~ s/\$\{$oldvarname\}/$vars->{$oldvarname}/g;
	    $value =~ s/\$$oldvarname/$vars->{$oldvarname}/g;
	}

	#
	# expand "backtick substitutions": `basename xxx.com .com` -> xxx
	#
	if( $value =~ /\`(.+)\`/ ) {
	    my $expansion = `$1`;
	    chomp $expansion;
	    $value =~ s/\`.+\`/$expansion/g;
	}
    }

    if( $value =~ /^'.+'$/ ) {
	$value =~ s/^\s*'|'\s*$//g; # remove single quotes at the end or at the beginning
    } else {
	$value =~ s/^\s*"|"\s*$//g; # remove double quotes at the end or at the beginning
    }

    $vars->{$varname} = $value;
    return wantarray ? ( $varname, $value ) : $value;
}

my $line = "";

my $basename;
my $dirname;
my $dirbase;
my $prefix;

while(<>) {

    if( !defined $basename ) {
	$basename = File::Basename::basename( $ARGV, ".sh" );
	$dirname = File::Basename::dirname( $ARGV );
	$dirbase = File::Basename::basename( $dirname );
	$prefix = "shout/${dirbase}/${basename}";
        $vars{"0"} = "$ARGV";
    }

    if( /\\$/ ) {
	chomp;
	local $/ = "\\";
	chomp;
	$line .= $_;
	next unless eof;
    }

    if( $line ) {
	$_ = $line . $_;
	$line = "";
    }

    if( /^\s*((set|setvar)\s+)?INPUT[^=]*=(.+)$/ ) {
	my $depend = expand_vars( $_, \%vars );
	push( @inputs, $depend );
	next;
    }
    if( /^\s*((set|setvar)\s+)?OUTPUT[^=]*=(.+)$/ ) {
	my $depend = expand_vars( $_, \%vars );
	push( @outputs, $depend );
	next;
    }
    if( /^\s*((set|setvar)\s+)?OUTDIR[^=]*=(.+)$/ ) {
	my $depend = expand_vars( $_, \%vars );
	push( @outdirs, $depend );
	next;
    }
    if( /^\s*((set|setvar)\s+)?([a-zA-Z0-9_]+)\s*=(.+)$/ ) {
	expand_vars( $_, \%vars );
	next;
    }
    if( /\s*#BEGIN\s+DEPEND/ ) {
	@inputs = ();
	@outputs = ();
	next;
    }
    if( /\s*#END\s+DEPEND/ || eof ) {
	if( !eof ) {
	    close( ARGV );
	}
	for( @inputs ) {
	    print "${prefix}.diff: $_\n";
	}
	print "CLEAN_TARGETS += clean${basename}\n";
	print "clean${basename}:\n";
	print "\trm -f ${prefix}.diff\n";

	%vars = %ENV;
	@inputs = ();
	@outputs = ();
    }
    if( eof ) {
        $basename = $dirname = $prefix = undef;
    }
}
