#! /bin/sh
#------------------------------------------------------------------------------
#$Author: andrius $
#$Date: 2015-02-03 16:21:54 +0200 (An, 03 Vas 2015) $ 
#$Revision: 484 $
#$URL: svn://saulius-grazulis.lt/scripts/prepare $
#------------------------------------------------------------------------------
#*
#   Set up a directory for a specific task from templates. 
#
#   The script finds a direcory with the task name in the template
#   directory, and copies all files that were missing in the
#   destination directory (--output-dir; working directory by
#   default).
#**

set -ue
## set -x

script() { echo "# $*"; cat; }
setvar() { eval $1="'$3'"; }

setvar Id = '$Id: prepare 484 2015-02-03 14:21:54Z andrius $'

setvar TASKS        = ""
setvar TEMPLATE_DIR = "${HOME}/.prepare/templates"
setvar USER_OUTDIR  = ""

setvar VERBOSE     = false
setvar INTERACTIVE = false
setvar DEBUG       = false

setvar SEEN_TWO_DASHES = false
setvar SETUP_OPTIONS   = ""
setvar TASK_OPTIONS    = ""
setvar SVN_COMMIT      = true
setvar SVN_ADD         = true
setvar CLEAN           = false
setvar LIST            = false

setvar SCRIPT = false

setvar UPDATE_TEMPLATES = false

## setvar BASENAME = "`basename $0`"

#BEGIN EXECUTABLES (Executable files, needed for this script:)

rsync="rsync"

if type -p svntt > /dev/null 2>&1
then
    svn="svntt"
else
    svn="svn"
fi

#END EXECUTABLES

#** OPTIONS:
#**  -o, --output-dir task/
#**          Specify directory to copy all files into.
#**
#**  -t, --template-dir ~/templates
#**          Specify directory where to look for templates.
#**
#**  --help  print short help message (this message) and exit

# Task-specific options:
#
# --crystal CName
# --dataset DName
# --project PName
# --search  search-dir/

# Options, common for both 'prepare' and a task-specific '.setup' script:
#
# --debug
# --no-debug
# --output-dir

while [ $# -gt 0 ]
do

  if [ $SEEN_TWO_DASHES = true ]
  then
      SETUP_OPTIONS="${SETUP_OPTIONS} '$1'"
      shift
      continue
  fi

  case $1 in
      -s|--svn-add|--svn-ad|--svn-a|--svn|--sv|--s)
            SVN_ADD=true
	    ;;
      -s-|--no-svn-add|--no-svn-ad|--no-svn-a|--no-svn|--no-sv|--no-s|\
      --dont-svn-add|--dont-svn-ad|--dont-svn-a|--dont-svn|--dont-sv|--dont-s)
            SVN_ADD=false
	    ;;
      -c|--commit|--commi|--comm|--com|--co|--c)
            SVN_COMMIT=true
	    ;;
      -c-|--no-commit|--no-commi|--no-comm|--no-com|--no-co|--no-c|\
      --dont-commit|--dont-commi|--dont-comm|--dont-com|--dont-co|--dont-c)
            SVN_COMMIT=false
	    ;;
      -i|--interactive|--interactiv|--interacti|--interact|--interac|--intera|\
      --inter|--inte|--int|--in|--i)
            INTERACTIVE=true
	    ;;
      -i-|--non-interactive|--non-interactiv|--non-interacti|--non-interact|\
      --non-interac|--non-intera|--non-inter|--non-inte|--non-int|--non-in|\
      --non-i|--no-interactive|--no-interactiv|--no-interacti|--no-interact|\
      --no-interac|--no-intera|--no-inter|--no-inte|--no-int|--no-in|--no-i)
            INTERACTIVE=false
	    ;;
      -l|--list|--lis|--li|--l)
            LIST=true
	    ;;
      -o|--output-dir|--output-di|--output-d|\
      --output|--outpu|--outp|--out|--ou|--o)
            USER_OUTDIR="$2"
	    shift
	    ;;
      -t|--template-dir|--template-di|--template-d|\
      --template|--templat|--templa|--templ|--temp|--tem|--te|--t)
            TEMPLATE_DIR="$2"
	    shift
	    ;;
      -u|--update-templates|--update-template|--update-templat|\
      --update-templa|--update-templ|--update-temp|--update-tem|\
      --update-te|--update-t|--update|--updat|--upda|--upd|--up|--u)
            UPDATE_TEMPLATES=true;
            ;;
      -u-|--dont-update-templates|--dont-update-template|\
      --dont-update-templat|--dont-update-templa|--dont-update-templ|\
      --dont-update-temp|--dont-update-tem|--dont-update-te|\
      --dont-update-t|--dont-update|--dont-updat|--dont-upda|\
      --dont-upd|--dont-up|--dont-u)
            UPDATE_TEMPLATES=false;
            ;;
      -v|--verbose|--verbos|--verbos|--verb|--ver|--ve|--v)
            VERBOSE=true
	    ;;
      -q|--quiet|--quie|--qui|--qu|--q|\
      -v-|--not-verbose|--not-verbos|--not-verbo|--not-verb|--not-ver|--not-ve|\
      --not-v|--no-verbose|--no-verbos|--no-verbo|--no-verb|--no-ver|\
      --no-ve|--no-v)
            VERBOSE=false
	    ;;
      --clean|--clea|--cle|--cl)
          CLEAN=true
          ;;
      --no-clean|--no-clea|--no-cle|--no-cl)
          CLEAN=false
          ;;
      --script|--scrip|--scri|--scr|--sc|--s)
          SCRIPT=true
          ;;
      --no-script|--no-scrip|--no-scri|--no-scr|--no-sc|--no-s)
          SCRIPT=false
          ;;

      --debug|--debu|--deb|--de|--d)
            DEBUG=true
	    ;;
      --no-debug|--no-debu|--no-deb|--no-de|--no-d)
            DEBUG=false
	    ;;
      --help|--hel|--he|--h)
	    echo $Id
	    echo
	    echo "Usage:"
	    echo "    `basename $0` [options] task1 [--] [task-options]"
            awk '/#\*/,/#\*\*/{sub("^ *#[*]?[*]?", ""); print $0}' $0
	    exit
	    ;;

# Task-specific options:

      --crystal|--crysta|--cryst|--crys|--cry|--cr|--c)
	  TASK_OPTIONS="${TASK_OPTIONS} --crystal '$2'"
	  shift
	  ;;

      --dataset|--datase|--datas|--data|--dat|--da|--d)
	  TASK_OPTIONS="${TASK_OPTIONS} --dataset '$2'"
	  shift
	  ;;

      --project|--projec|--proje|--proj|--pro|--pr|--p)
	  TASK_OPTIONS="${TASK_OPTIONS} --project '$2'"
	  shift
	  ;;

      --search|--searc|--sear|--sea|--se|--s)
	  SETUP_OPTIONS="${SETUP_OPTIONS} --search '$2'"
	  shift
	  ;;

# Catch-all options:

      --) SEEN_TWO_DASHES=true ;;
      -*) echo "`basename $0`: unknown option $1" >&2 ; exit 1 ;;
      *)  TASKS="$TASKS '$1'" ;;
    esac
    shift
done

test $DEBUG = true && set -x

run_cmd=""

if [ ${SCRIPT} = true ]
then
    run_cmd="echo"
fi

if [ ${UPDATE_TEMPLATES} = true ]
then
    ${run_cmd} ${svn} update ${TEMPLATE_DIR}
fi

if [ ${LIST} = true ]
then
    ls ${TEMPLATE_DIR}
    exit 0
fi

#
# When preparing a working directory from a template, this script
# should perform the following operations:
#
# a') If the template directory has a script '.getdirname', and the
# user did not specify any output directory, call this script to
# generate a directory name. If this script exits with a non-zero
# status, fail.
#
# a) copy (rsync) all files from the template directory to the working
# directory. Any axisting files should be left alone, and not
# overwritten. Subversion files (.svn) should be excluded while
# copying.
#
# b') If the user has specified the '-i' (--interactive) option, check
# for an exceutable file called '.interact' in the newly created
# directory, and start it. It is supposted to start dialog with the
# user and finish the directory-specific setup.
#
# If there is no file
# called 'interact' in the created working directory, inform the user
# about the fact and quit.
#
# b'') For non-interactive runs, check if the freshly prepared
# directory contains a '.setup' executable; if so, call it to finish
# the directory-specific setup. This script is supposed to set
# everything up automatically. All unrecognised options and all
# options that follow the '--' option are passed to this script.
#
# c) If the directory immediately above the newly created directory
# contains an '.svn' directory, (i.e. if the directory is under the
# version control), execute 'svn add template' to add the newly
# created directory to a Subversion repository. A separate option of
# the 'prepare' script should control whether the directory should be
# immediately committed or not (default behaviour should be to
# commit).
#
# d) If the newly created directory contains a .README file, execute
# 'cat .README' in the newly created directoy. This file is supposed
# to contain short instructions how to proceed with the
# directory-specific task (e.g. with refinement, or with model
# building).
#

if [ $VERBOSE = true ]
then
    RSYNC_VERBOSE="--verbose"
    SVN_VERBOSE=""
else
    RSYNC_VERBOSE=""
    SVN_VERBOSE="-q"
fi

eval set -- "${TASKS}"

# If we have not seen any task to set up before the '--' option, this
# means that the task name was most probably specified after the '--'
# option. The following 'if' fishes it out from the SETUP_OPTIONS
# variable.

if [ $# -eq 0 ]
then
    eval set -- "${SETUP_OPTIONS}"
    if [ $# -gt 0 ]
    then
	TASKS="$1"
	shift
	SETUP_OPTIONS="$@"
	eval set -- "${TASKS}"
    fi
fi

if [ -n "${TASK_OPTIONS}" ]
then
    SETUP_OPTIONS="${TASK_OPTIONS} ${SETUP_OPTIONS}"
fi

## set -x

for TEMPLATE
do

  #
  # Determine how the output directory will be called:
  #

  SETUP_OPTIONS_USED=false

  if [ "$USER_OUTDIR" != "" ]
  then
      OUTPUT_DIR="${USER_OUTDIR}"
  else
      GET_DIRNAME_SCRIPT="${TEMPLATE_DIR}/${TEMPLATE}/.getdirname"
      SETUP_OPTIONS_USED=true
      if [ -e ${GET_DIRNAME_SCRIPT} ]
      then
	  OUTPUT_DIR="$(eval ${GET_DIRNAME_SCRIPT} ${SETUP_OPTIONS})"
	  test $? -ne 0 && exit 1
	  echo "Selecting ${OUTPUT_DIR} for output directory"
      else
	  OUTPUT_DIR="${TEMPLATE}"
      fi
  fi

  #
  # Determine were to look for templates:
  #

  SOURCE_DIR="${TEMPLATE_DIR}/${TEMPLATE}"

  #
  # Create and populate the output directory:
  #

  if [ -e "${SOURCE_DIR}" ]
  then
      ${run_cmd} mkdir -p ${OUTPUT_DIR}

      EXCLUDE=""
      if [ ${CLEAN} = true ]
      then
          EXCLUDE="--exclude .getdirname"
      fi

      ${run_cmd} ${rsync} \
	  ${RSYNC_VERBOSE} \
	  --archive \
	  --ignore-existing \
	  --exclude .svn \
	  --exclude .bzr \
	  --exclude '*~' \
      ${EXCLUDE} \
	  ${SOURCE_DIR}/ \
	  ${OUTPUT_DIR}/
  else
      echo "$0: could not find template for task '${TEMPLATE}'" \
           "in '${TEMPLATE_DIR}'" >&2
      continue
  fi

  #
  # Run the '.setup' script in the new directory:
  #

  if [ ${INTERACTIVE} = true ]
  then
      SETUP_FILE=.interact
  else
      SETUP_FILE=.setup
  fi

  if [ -x ${SOURCE_DIR}/${SETUP_FILE} ]
  then (
      ## set -x
      ${run_cmd} cd ${OUTPUT_DIR}
      ${run_cmd} eval ./${SETUP_FILE} ${SETUP_OPTIONS}
      if [ ${CLEAN} = true ]
      then
          ${run_cmd} rm ${SETUP_FILE}
      fi
  )
  elif [ ${INTERACTIVE} = true ]
  then
      echo "$0: "
      echo "    there is no interactive setup script '${SETUP_FILE}'"
      echo "    for an interactive setup of the '${OUTPUT_DIR}' directory."
      echo "    You will have to adjust all scripts and" \
	  "subdirectories manually."
  else
      if [ -n "$SETUP_OPTIONS" -a $SETUP_OPTIONS_USED = false ]
      then
          echo "$0: the following options were not used since there is no "
          echo "$0: .setup script in the ${TASKS} template:"
          eval echo "$0: " ${SETUP_OPTIONS}
      fi
  fi

  #
  # Check whether the parent dir is in a Subversion repository and if so,
  # perform 'svn add' and 'svn commit'
  #

  TOP_DIR="`dirname ${OUTPUT_DIR}`"

  if svn info ${TOP_DIR} >/dev/null 2>&1
  then
      if [ ${SVN_ADD} = true ]
      then
	  ${run_cmd} ${svn} add ${OUTPUT_DIR}
	  ${run_cmd} find ${OUTPUT_DIR} -name .svn-ignore \
	      -exec sh -c 'svn propset svn:ignore -F {} `dirname {}`' \;
	  if [ ${SVN_COMMIT} = true ]
	  then
	      ${run_cmd} ${svn} ci ${SVN_VERBOSE} ${OUTPUT_DIR} \
		  -m \
	      "Adding the newly created working directory '${OUTPUT_DIR}' from template '${TEMPLATE}'."
	  fi
      fi
  fi

  #
  # Display a README file:
  #

  README_FILE=${OUTPUT_DIR}/.README

  if [ -f ${README_FILE} ]
  then
      echo "==================================================================="
      echo "${README_FILE}"
      echo "==================================================================="
      ${run_cmd} cat ${README_FILE}
      echo "==================================================================="
      if [ ${CLEAN} = true ]
      then
          ${run_cmd} rm ${README_FILE}
      fi
  fi

done
