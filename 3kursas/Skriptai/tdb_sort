#! /bin/sh
#!perl -w # --*- Perl -*--
eval 'exec perl -x $0 ${1+"$@"}'
    if 0;
#------------------------------------------------------------------------------
#$Author:$
#$Date:$ 
#$Locker:$
#$Revision:$
#$Source:$
#$State:$
#------------------------------------------------------------------------------
#*
#  Sort a tagged file
#**

use strict;

use SOptions;
use SUsage;

my $key = undef;
my $field = undef;
my $numeric = undef;
my $ascending = 1;
my $keylen = undef;

@ARGV = getOptions(
#** -k, --key TAG            use lines tagged with TAG for sorting
#** -l, --length 15          print keys padded with spaces to 15 characters
#** -f, --field 0            use field (column) 0 in the TAG line for sorting
#** -n, --numeric            compare data as numbers, not as strings (default)
#** -s, --string             compare data as ascii
#** --help,--usage           print short usage message (this message) and exit

    "-l,--length"     => \$keylen,
    "-k,--key"        => \$key,
    "-f,--field"      => \$field,
    "-n,--numeric"    => sub { $numeric = 1 },
    "-s,--string"     => sub { $numeric = 0 },
    "-r,--reverse"    => sub { $ascending = 0 },
    "-a,--ascending"  => sub { $ascending = 1 },
    "-d,--descending" => sub { $ascending = 0 },
    "--help,--usage"  => sub { SUsage::usage; exit },
);

my @initial_argv = @ARGV;
my @records = ();
my %record = ();
my @keys = ();
my %keys = ();

while(<>) {
    if( /^\s*$/ || eof ) {
	if( %record ) {
	    push( @records, {%record} );
	    %record = ();
	}
    } else {
	next if /^nr/;
	chomp;
	my ( $key, $value ) = split( " ", $_, 2 );
	if( exists $record{$key} ) {
	    if( ref $record{$key} eq "ARRAY" ) {
		push( @{$record{$key}}, $value );
	    } else {
		$record{$key} = [ $record{$key}, $value ];
	    }
	} else {
	    $record{$key} = $value;
	}
	if( !exists $keys{$key} ) {
	    push( @keys, $key );
	    $keys{$key} = $key;
	}
	if( !defined $keylen ) {
	    m/^($key *)/;
	    $keylen = length($1);
	}
    }
}

if( !defined $key ) {
    $key = $keys[0];
}

if( !exists $keys{$key} ) {
    print STDERR "requested sorting key (tag) '$key' does not exist ".
	"in the files '@initial_argv'\n";
    die;
}

if( !defined $numeric ) {
    if( $records[0]->{$key} =~ /^\s*[-+.\dEe]+\s*$/ ) {
	$numeric = 1;
    } else {
	$numeric = 0;
    }
}

my @sorted;

if( $numeric ) {
    if( $ascending ) {
	@sorted = sort { $a->{$key} <=> $b->{$key} } @records;
    } else {
	@sorted = sort { $b->{$key} <=> $a->{$key} } @records;
    }
} else {
    if( $ascending ) {
	@sorted = sort { $a->{$key} cmp $b->{$key} } @records;
    } else {
	@sorted = sort { $b->{$key} cmp $a->{$key} } @records;
    }
}

my $nr = 0;
my $record;
foreach $record (@sorted) {
    printf "%-${keylen}s\t%s\n", "nr", ++$nr;
    my $key;
    foreach $key (@keys) {
	if( exists $record->{$key} ) {
	    if( ref $record->{$key} eq "ARRAY" ) {
		my $value;
		foreach $value ( @{$record->{$key}} ) {
		    printf "%-${keylen}s\t%s\n", $key, $value;
		}
	    } else {
		printf "%-${keylen}s\t%s\n", $key, $record->{$key};
	    }
	}
    }
    print "\n";
}
