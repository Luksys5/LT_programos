#!/bin/sh -f
#------------------------------------------------------------------------
#$Author: grazulis $
#$Date: 2000/03/08 14:32:57 $ 
#$Locker: grazulis $
#$Revision: 1.2 $
#$Source: /kaefer/u05/grazulis/src/scripts/RCS/submit,v $
#$State: Exp $
#------------------------------------------------------------------------
#*
#  Submit jobs (shell scripts or shell commands) to a codine queue
#**

set -ue

Id='$Id: submit,v 1.2 2000/03/08 14:32:57 grazulis Exp grazulis $'

# executables:

perl=perl
qsub=qsub

# parameters:

PLATFORM=""
COMMAND=""
LOGFILE=""
COD_SHELL=$SHELL;

MEM=""
## CPU="-l hc=0:29:0"
CPU=""
SCRIPT=false

#**OPTIONS:
#** --dec         submit to Digital UNIX cluster
#** --sgi         submit to Silicon Graphics cluster
#** -s, --short   short job ( <= 29 min )
#** -l, --long    long job ( <= 120 min )
#** -j, --jumbo   very long job ( > 120 min )
#** -m, --memory  job needs large memory (~600 MB)
#**
#** -S, --shell /bin/mysh   use '/bin/mysh' as Codine shell
#**
#** --script          do not submit job, print Codine 'qsub'
#**                   command to the STDOUT
#** --help, --usage   print short usage message (this message) and exit
#
while [ $# -gt 0 ]
do
   case $1 in
      --dec|--de|--d)    PLATFORM="-l g=dec" ;;
      --sgi|--sg|--s)    PLATFORM="-l g=sgi" ;;
      --amd|--am|--a)    PLATFORM-"-l arch=lx24-amd64" ;;
      --idle|--idl|--id) PLATFORM="-l g=dec-idle" ;;
      -s|--short|--shor|--sho)          CPU="-l hc=0:29:0" ;;
      -l|--long|--lon|--lo)             CPU="-l hc=120:0:0" ;;
      -j|--jumbo|--jumb|--jum|--ju|--j) CPU="-l hc=120:0:0" ;;

      -m|--memory-large|--memory-larg|--memory-lar|--memory-la|--memory-l|\
      --memory|--memor|--memo|--mem|--me|--m)
	    MEM="-l hd=600M" ;;

      -S|--shell|--shel|--she|--sh|--s)   shift; COD_SHELL=$1 ;; 
      --log|--lo|--l)                     shift; LOGFILE="$1" ;;

      --help|--hel|--he|--h|--usage|--usag|--usa|--us|--u)
          echo $Id
          echo
          echo "Usage:"
          echo "    `basename $0` [options] 'command'"
          awk '/#\*/,/#\*\*/{sub("^ *#[*]?[*]?", ""); print $0}' $0
          exit
          ;;
      --script|--scrip|--scri|--scri|--scr|--sc|--s)
          SCRIPT=true
	  ;;
      -*) echo "`basename $0`: unknown option '$1'" ; exit 1 ;;
       *) FILE=`echo "$1" | awk '{print $1}'`
	  FILE=`basename $FILE .com`
	  ARG=`echo "$1" | awk '{print $2}'`
	  test -z "$ARG" || ARG=`echo $ARG | sed -e 's/^-//' -e 's/[^-a-zA-Z0-9.+=]/_/g'`
	  test -z "$ARG" || FILE="${FILE}_${ARG}"
          COMMAND="$1"
          ;;
   esac
   shift
done

if [ -z "${PLATFORM}" ]
then
    case "$HOSTTYPE" in 
	"alpha")  PLATFORM="-l g=dec" ;;
	"iris4d") PLATFORM="-l g=sgi" ;;
	## *) echo "$0: please specify cluster-platform"; exit 1 ;;
	*) PLATFORM="" ;;
    esac
fi

test "$COMMAND" = "" && { echo "$0: specify a command to submit on the command line"; exit 1; }
test "$LOGFILE" = "" && LOGFILE=$FILE.log

echo $COMMAND > $FILE.$$
chmod u+x $FILE.$$

JOBNAME=`${perl} -e '$_ = $ARGV[0]; s/\W+/_/g; s/^_+|_+$//g; print substr($_, 0, 10)' $COMMAND`

cmd='${qsub} $PLATFORM $CPU $MEM -S $COD_SHELL -cwd -N "$JOBNAME" -e $LOGFILE -o $LOGFILE $FILE.$$'
eval echo $cmd

if [ $SCRIPT = false ]
then
    rm -f ${LOGFILE}
    eval $cmd
    echo -n "Waiting for the job..."
    until qstat -u $USER | grep "$JOBNAME" | grep " [rstw] " > /dev/null
    do
	echo -n "."
    done
fi

rm -f $FILE.$$

test $SCRIPT = true && exit

echo -en "\nWaiting for the log file..."
until [ -f $LOGFILE ]
do
   echo -n "."
   sleep 2
done
echo ""

chmod 644 $LOGFILE

set +u
if [ "$DISPLAY" != "" ]
then
    set -u
    xterm -geometry 190x30+40+300 -fn 8x13 -bg black -fg cyan \
    	  -T "$COMMAND" -n "$FILE" \
          -e tail -f $LOGFILE &
else
    set -ux
    tail -f $LOGFILE
fi   
